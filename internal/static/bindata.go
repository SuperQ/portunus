// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x8f\xa3\x38\x13\xbe\xbf\xbf\xc2\x9a\xd1\x48\xef\xb6\x00\x91" +
	"\x8e\x26\x9a\x36\xc7\xa8\xf3\x2b\xf6\x52\xe0\x22\x58\x6d\x6c\x64\x4c\x3e\xd6\xca\x7f\x5f\x19\x9b\x04\x08\xb4\x72" +
	"\xdb\x43\x14\x6c\xd7\xe7\x53\x8f\xcb\xf5\x16\xbd\xd1\x1c\x4b\xa5\x31\x7a\xa3\x50\x1a\xd4\x36\x57\x97\xb8\xe5\xff" +
	"\x70\x79\xa4\xb9\xd2\x0c\x75\x9c\xab\xcb\xad\x32\xb5\xb0\xa5\x92\xc6\x9d\x21\xdd\xec\x9a\x4b\xd6\x2f\x4b\xa8\xb9" +
	"\xb8\xd2\x18\x9a\x46\x60\xdc\x5e\x5b\x83\x75\x44\xfc\x7f\xdc\xf1\x88\xb4\x20\xdb\xb8\x45\xcd\xcb\x4c\x70\x89\x71" +
	"\x85\xfc\x58\x19\xba\x49\x7e\xdf\x20\x02\x5a\xaa\xa2\x6b\x23\xa0\x95\x3a\xa1\x8e\x80\x42\x61\xf8\x09\x6d\xa1\x84" +
	"\xd2\x34\x17\x1d\x66\x06\x2f\x26\x66\x58\x28\x0d\x86\x2b\x49\xa5\x92\xd8\xc7\x13\xe5\x8a\x5d\x6d\x0d\xfa\xc8\x25" +
	"\x4d\xb3\x06\x18\x73\x51\xa7\x37\x09\x27\x9b\x43\xf1\x75\xd4\xaa\x93\x8c\xfe\xdc\xef\xf7\xd9\x60\x10\x8a\x2f\x77" +
	"\x4e\xde\x6c\x08\xe4\x3d\xf9\xad\xb1\x9e\xc4\xe6\xb7\x7a\xb1\x4e\xd8\x1a\x2e\xf1\x99\x33\x53\xd1\x3f\x69\xda\x5c" +
	"\xb2\xc1\x21\x81\xce\xa8\x87\xd7\x4c\xf0\xd6\xc4\xad\xb9\x0a\xec\x43\xcc\x18\x6f\x1b\x01\x57\x5a\x0a\xbc\x04\x5b" +
	"\x44\x70\x7b\x42\x6d\x78\x01\x22\x06\xc1\x8f\x92\xd6\x9c\x31\x81\x8f\xf3\xa4\x6d\xa0\x40\x6d\x9d\x16\x75\x1e\x1e" +
	"\x47\xa4\xda\x3c\xb2\xf5\x1f\xb1\x1e\xc0\x74\x39\x8c\xea\x33\xce\xc0\xa9\x82\x1d\xc2\xe1\xb2\x4f\x35\x17\xaa\xf8" +
	"\x0a\xa8\x70\x59\xa1\xe6\x66\x11\xe9\x47\x82\x24\x7d\x32\x9a\x14\x9d\xd6\x28\xcd\x04\xed\xc3\xe1\xb0\x24\x13\x2a" +
	"\x1b\x2d\x1d\xf9\xe2\x2f\x9d\xf4\xf4\xb0\x93\x30\x6f\x35\x70\xb9\x56\x95\x8d\xc6\xba\x2f\x0c\x79\x1f\xbe\x6e\x49" +
	"\x6e\xe4\x72\xfa\xf7\xdc\x3c\x7e\x8b\xa5\x99\xb2\x36\x3b\x57\xdc\x60\xdc\x17\x89\x4a\x75\xd6\xd0\x78\xd8\xcf\x5e" +
	"\x40\x2a\x5d\x83\x18\x57\xc2\x41\xe6\x22\x70\xbf\xb8\xd1\xbc\x06\x7d\x9d\xe0\x95\xa6\x87\x50\x87\xde\x76\xe6\x6f" +
	"\x1d\x4d\x9f\xb4\x06\x04\x9f\xf6\x3d\x7c\x4f\xdb\x1e\xbb\xb1\xab\xdd\xee\x70\x2b\x95\xae\x09\xe3\xa7\xc4\x7d\xc4" +
	"\x5a\x9d\xa3\xfb\x4e\xc0\xc8\x6d\xda\x31\x9e\xe9\xb3\x12\x11\x90\xa3\x58\x54\xed\xd7\x5a\x9d\xe3\x5e\xe4\x0e\xbc" +
	"\x47\xfc\x01\x4c\x9a\xfc\x71\xd0\xac\x58\x26\x6d\x03\xd2\xef\xa1\xd6\x4a\xbf\xe0\x69\xae\x62\x43\x75\x63\x81\xa5" +
	"\xa1\x69\xe2\x08\x11\x80\xd6\xc8\x16\x1c\x73\xd9\x74\xe6\x7b\x47\x27\x10\x1d\xce\x52\xf2\x2c\xdc\xa4\xe9\xaf\x35" +
	"\x9b\x54\x2a\xf3\xff\x84\xbb\x8e\xe8\x9a\xc4\x5f\x2f\xf8\x98\xab\xd8\xf9\x35\x1c\x68\xb2\x69\x2e\xa4\x55\x82\x33" +
	"\xd2\xb7\xb9\xd0\xb2\x35\x30\xde\xb5\x74\x3b\x74\xe9\x11\xe2\xb3\x2e\xbc\x73\x5b\x93\xd5\x6a\x16\x3d\xcd\x6c\xf0" +
	"\xe0\x81\xfc\xf9\xf1\xf1\xb1\x2a\x1f\xe8\xba\x76\x1c\xe8\x39\x31\xb7\xdd\x6e\xd7\xcc\x8d\x2b\x3b\x55\xda\xa7\x69" +
	"\x36\x69\x40\xfb\xfd\x0b\x46\x96\xd3\x49\x97\xb8\xfe\xa4\xfa\x7d\x66\x63\xc9\xc5\x24\xc7\x4e\x5e\x67\xc0\x38\xc5" +
	"\xcf\xcf\xcf\x87\x89\xbb\x0c\xe9\x3f\x97\x5b\xdd\xe4\xbd\x08\x14\xfa\x2f\x38\x35\x0b\xd6\xaf\x8b\x0a\x8b\x2f\x64" +
	"\x2f\xa7\xe8\xd7\x9d\x0c\x7a\x61\x84\x99\x25\x9e\x15\x4a\x1a\xf7\x86\xfc\xf8\xfb\x7d\xb7\x49\x7f\xbc\x16\xc3\x2b" +
	"\xb6\x36\xeb\xb6\x06\xf5\xe9\xc3\x3a\x74\xa2\x01\xfd\xed\x0a\x24\xe0\x0b\x38\x7d\xee\x56\xe5\xc2\xec\xb4\x7e\x3e" +
	"\xa7\xe9\x93\x80\xbf\x02\xa3\x59\xeb\xf9\x36\x1a\xc8\x05\xda\x47\x8f\x1b\x89\x08\x68\x5a\xa4\xc3\xc7\x70\xe0\x9e" +
	"\x46\x3f\x86\xf5\xaa\xc4\x54\x08\x8c\x98\xfb\x4d\xcb\x95\x31\xaa\x1e\x71\xcc\xcf\x64\x53\x61\x62\x2a\x3b\xe6\x54" +
	"\x0f\x58\x10\x71\x53\xdf\x77\xf6\x1c\x67\x67\xb2\xc4\x30\xbb\x30\xe0\x79\xa1\xc4\xc1\xa4\x64\x3b\x24\xf9\xcb\xcf" +
	"\x41\x7e\x06\x28\x50\x1a\xd4\x0b\xaf\xfe\xed\x7f\xff\x06\x00\x00\xff\xff\xa7\x12\x50\xd5\x3c\x0b\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 2876,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556906638, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
