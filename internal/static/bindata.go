// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xdb\x6e\xa3\x3c\x10\xbe\xff\x9f\xc2\xd2\xaf\xde\x44\x18\x91\xae" +
	"\x5a\x55\xe6\xb2\x52\xde\x63\xc0\x43\xb0\x6a\x6c\x64\x0f\x09\x59\x8b\x77\x5f\x19\x43\x49\x1a\x76\x2f\xa2\x18\xcf" +
	"\xc1\xdf\xc1\x9e\x43\x76\x10\x15\x36\xd6\x61\x76\x10\xd0\x10\xba\x50\xd9\x91\x7b\xf5\x5b\x99\xb3\xa8\xac\x93\xe8" +
	"\x78\x65\xc7\xa9\xa5\x4e\x87\xc6\x1a\x8a\x31\x14\xc7\xf7\x7e\x2c\xe7\xcf\x06\x3a\xa5\x6f\x82\x43\xdf\x6b\xe4\xfe" +
	"\xe6\x09\xbb\x8c\xa5\x7f\x3e\xa8\x8c\x79\x30\x9e\x7b\x74\xaa\x29\xb5\x32\xc8\x5b\x54\xe7\x96\xc4\x31\x7f\x9b\x20" +
	"\x03\xd1\xd8\x7a\xf0\x19\x88\xd6\x5e\xd0\x65\x20\xa0\x26\x75\xc1\x50\x5b\x6d\x9d\xa8\xf4\x80\x25\xe1\x48\x5c\x62" +
	"\x6d\x1d\x90\xb2\x46\x18\x6b\x70\xc6\x93\x55\x56\xde\x42\x07\xee\xac\x8c\x28\xca\x1e\xa4\x8c\xa8\x8b\xc9\xc0\x25" +
	"\x54\x50\x7f\x9d\x9d\x1d\x8c\x14\xff\x7f\x7e\x7e\x96\x6b\x43\xa8\xbf\x62\x9c\x1d\xc2\x02\xe4\x35\x7f\x73\xd8\x3d" +
	"\x60\x4b\x5b\x73\xda\xa0\x43\x07\x23\xbf\x2a\x49\xad\xf8\x28\x8a\x7e\x2c\xd7\x03\x19\x0c\x64\xb7\x53\x4b\xad\x3c" +
	"\x71\x4f\x37\x8d\x33\xc4\x52\x2a\xdf\x6b\xb8\x89\x46\xe3\xb8\xf4\x62\x5a\x85\x0b\x3a\x52\x35\x68\x0e\x5a\x9d\x8d" +
	"\xe8\x94\x94\x1a\xb7\x78\xee\x7b\xa8\xd1\x85\x58\x25\xe2\x09\x5b\x88\xb5\xc7\x8d\x6d\x5a\x70\xb7\x8a\x19\x39\xdc" +
	"\xf9\x73\xcf\x20\x96\x42\x58\xe1\x28\x33\x53\xad\xb4\xad\xbf\x16\x55\x94\x69\xd1\x29\xda\x55\x7a\x23\xc8\x8a\xa7" +
	"\xa6\x79\x3d\x38\x87\x86\x1e\xd4\x3e\x9d\x4e\x7b\x39\x8b\xb3\xd9\x5e\x28\x99\xbf\x17\x99\xaf\x47\x78\x80\x39\x75" +
	"\xa0\xcc\xdf\x5c\x39\x3a\xec\x66\x63\xd8\xeb\xba\x9a\xf2\x8a\xcc\x3e\xfd\x6f\x6e\x49\xbf\x5d\x6b\x1e\x6f\x6d\x79" +
	"\x6d\x15\x21\x9f\x4d\x12\xc6\x5e\x1d\xf4\x49\xf6\x6b\x4a\x30\xd6\x75\xa0\xef\x9d\x88\x92\x45\x04\xf1\xc7\x7b\xa7" +
	"\x3a\x70\xb7\x07\xbd\x8a\xe2\xb4\xf8\x30\xf7\x2e\xd3\xab\x13\xc5\x53\xd5\xaa\xe0\xd3\x7e\x92\xef\x69\x3b\x69\x77" +
	"\x7f\xd4\xfb\xfb\x69\x6a\xac\xeb\x98\x54\x97\x3c\x2e\xb8\xb3\xd7\x70\x2f\x5d\xf1\x1c\x67\x1a\x2a\xd4\xdf\x02\x26" +
	"\xe5\x36\x82\x45\xfe\x11\x29\x3e\x97\x29\xd3\x0f\xf4\xa3\x2c\x39\x76\x2c\x8a\x97\x89\xa0\xd2\x18\xb6\x8d\x85\x37" +
	"\xaf\xad\xd6\xd0\x7b\x14\xeb\x62\x0d\x44\xcd\xd3\xfb\x9e\x4b\x19\xb5\x08\x92\x51\x9c\x58\xcb\x98\x22\xb2\x9d\x38" +
	"\xf6\x23\xf3\x56\x2b\xc9\xd2\x63\x7f\x4c\x66\xd4\x86\x7b\x43\x7f\x45\xec\x4b\x4a\x1c\x27\xff\xea\x17\xe7\xc8\x8f" +
	"\x5c\x46\x32\xec\x4c\x8e\x94\x94\x47\xbf\xac\xf1\x2b\xc9\x97\xf4\xc0\xd2\xe5\xaa\xd1\x10\xba\x9d\xeb\x34\xfd\xf7" +
	"\x27\x00\x00\xff\xff\x5c\x30\x83\x6b\x95\x05\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 1429,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556455208, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
