// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\xd1\x6e\xea\x3c\x0c\xc7\xef\xbf\xa7\x88\x34\xed\x06\x35\xa8\x0c" +
	"\x6d\xfa\x96\x5e\x4e\xe2\x3d\xdc\xc6\x50\x6b\x69\x52\x25\x2e\x2b\x27\xea\xbb\x1f\xa5\xa1\x67\x30\xaa\x5d\x20\xd2" +
	"\xd8\x8e\xff\xfe\xd9\xde\x14\x1b\x55\xe3\xd1\x79\x2c\x36\x0a\x8e\x8c\x3e\xd6\x6e\x94\x81\xfe\x90\x3d\xa9\xda\x79" +
	"\x8d\x5e\xd6\x6e\x9c\x5a\xee\x4c\x3c\x3a\xcb\xc9\x86\x6a\xf7\xd6\x8f\xd5\xfc\x79\x84\x8e\xcc\x45\x49\xe8\x7b\x83" +
	"\x32\x5c\x02\x63\x57\x88\xfc\x2f\x07\x2a\x44\x00\x1b\x64\x40\x4f\xc7\xca\x90\x45\xd9\x22\x9d\x5a\x56\xbb\xed\xeb" +
	"\x04\x05\xa8\xa3\x6b\x86\x50\x80\x6a\xdd\x19\x7d\x01\x0a\x1a\xa6\x33\xc6\xc6\x19\xe7\x55\x6d\x06\xac\x18\x47\x96" +
	"\x1a\x1b\xe7\x81\xc9\x59\x65\x9d\xc5\x59\x4f\x51\x3b\x7d\x89\x1d\xf8\x13\x59\x55\x56\x3d\x68\x9d\x54\x97\x93\x85" +
	"\x73\xac\xa1\xf9\x3c\x79\x37\x58\xad\x9e\x3e\x3e\x3e\xaa\xe5\x41\x68\x3e\x93\x5d\x6c\xe2\x55\xc8\xcb\xf6\xd5\x63" +
	"\x77\xa7\x2d\x5f\xcd\x6e\x83\x89\x1d\x8c\xf2\x8b\x34\xb7\xea\xff\xb2\xec\xc7\x6a\x49\x28\x60\x60\xf7\x9d\xb5\x32" +
	"\x14\x58\x06\xbe\x18\xcc\x12\x73\xb8\x30\x14\x35\x85\xde\xc0\x45\x91\x9d\xb3\xd4\xc6\x35\x9f\xd5\x19\x3d\x53\x03" +
	"\x46\x82\xa1\x93\x55\x1d\x69\x6d\x6e\x82\x44\xbb\xfb\x2e\x2d\x1f\xa4\x5f\xc8\x25\xc1\x37\xcd\xb8\x95\x9b\x42\x61" +
	"\x3d\x63\x46\x40\xb6\x45\x4f\xbc\x8a\xf5\xbb\x1a\x51\x3e\x3c\xba\x6d\x06\xef\xd1\xf2\x1d\xda\xc3\xe1\xb0\xe6\x73" +
	"\x6d\x63\xb1\x66\xca\x9d\x5e\xb3\xcc\xb3\x10\xef\x64\x4e\x1d\x90\xfd\xbd\x05\xe2\xc5\x63\x37\x9f\xa6\x6d\xcd\x76" +
	"\xbd\xf6\x7f\x85\x65\x78\xab\xf0\xef\xe7\xb3\xfa\x6a\x89\x51\x86\x1e\x9a\xd4\xd0\x2f\x0f\xfd\xfc\x7e\xfa\xc9\xde" +
	"\x53\x07\xfe\x72\x87\xa2\x2c\x0f\x57\xc4\x73\xe4\x83\xf3\xc2\xe4\xe1\x3e\x03\x79\xb8\xce\x34\x6e\x33\xbc\xbd\x1d" +
	"\x26\x86\xda\x60\xcc\x30\x76\x65\xf9\x5c\x5d\x97\xb4\x71\xc6\x40\x1f\x50\x2d\x87\xc5\x90\x0a\xc8\x6b\x31\x87\x0a" +
	"\x6e\x11\xb4\xe0\xb4\xe8\xd7\xed\x66\x76\x9d\xda\xf5\xa3\x08\xce\x90\x16\x4f\xfb\xfd\xfe\x87\xaf\xe0\x36\xde\xc2" +
	"\xd9\xa7\xd1\xb8\xba\xa4\x25\xfc\xf5\xb9\xf7\xf7\xf7\x1f\xbe\x82\x75\x5c\xd9\xb7\xec\xb4\x4d\x98\x9c\x0d\x4b\x8d" +
	"\xcf\x79\x52\x73\xa3\x1a\xb4\x8c\x7e\xfa\xef\x6f\x00\x00\x00\xff\xff\x6f\x3c\xce\xf2\xb8\x04\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 1208,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556400145, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
