// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdd\x6e\xa3\x3c\x10\xbd\xff\x9e\xc2\xd2\x6a\x6f\x2a\x8c\x9c\x8d" +
	"\xb6\xda\x9a\xcb\xa8\x79\x8f\x01\x0f\xc1\xaa\xb1\x91\x6d\xf2\xf3\x59\xbc\xfb\xca\x18\x1a\x68\x48\xb5\x17\x55\x8d" +
	"\xe7\xf7\x9c\x39\x19\xbf\x64\x2f\xbc\xc4\xda\x58\xcc\x5e\x38\xd4\x1e\x6d\x28\xcd\x95\x3a\xf9\xbf\xd4\x27\x5e\x1a" +
	"\x2b\xd0\xd2\xd2\x5c\x87\xc6\xb7\x2a\xd4\x46\xfb\x68\x43\xbe\x7b\xed\xae\xc5\xf8\x59\x43\x2b\xd5\x8d\x53\xe8\x3a" +
	"\x85\xd4\xdd\x9c\xc7\x36\x23\xe9\x3f\xed\x65\x46\x1c\x68\x47\x1d\x5a\x59\x17\x4a\x6a\xa4\x0d\xca\x53\xe3\xf9\x2e" +
	"\xff\x3d\x40\x06\xbc\x36\x55\xef\x32\xe0\x8d\x39\xa3\xcd\x80\x43\xe5\xe5\x19\x43\x65\x94\xb1\xbc\x54\x3d\x16\x1e" +
	"\xaf\x9e\x0a\xac\x8c\x05\x2f\x8d\xe6\xda\x68\x1c\xfb\xc9\x4a\x23\x6e\xa1\x05\x7b\x92\x9a\xb3\xa2\x03\x21\x62\xd7" +
	"\x6c\xd0\x70\x0e\x25\x54\x1f\x27\x6b\x7a\x2d\xf8\x8f\xc3\xe1\x50\xcc\x09\xa1\xfa\x88\x76\xf2\x12\xa6\x46\x7e\xe5" +
	"\xbf\x2d\xb6\xab\xde\xd2\xd5\xe8\xd6\xab\xd0\xc2\x95\x5e\xa4\xf0\x0d\xff\xc3\x58\x77\x2d\xe6\x82\x04\x7a\x6f\xee" +
	"\x55\x0b\x25\x9d\xa7\xce\xdf\x14\x8e\x2d\x16\x42\xba\x4e\xc1\x8d\xd7\x0a\xaf\x53\x2e\xa2\x64\x38\xa3\xf5\xb2\x02" +
	"\x45\x41\xc9\x93\xe6\xad\x14\x42\xe1\xdd\x9e\xbb\x0e\x2a\xb4\x21\x46\xf1\x58\xe1\x6e\x22\xcd\xee\x8e\x36\x1d\xa8" +
	"\x9d\xc9\x8c\x18\x16\xf3\x59\x22\x88\xa1\x10\xe6\x76\xa4\x1e\xa1\x96\xca\x54\x1f\x13\x2b\x52\x37\x68\xa5\xdf\x64" +
	"\xfa\x0e\x90\xb0\x87\xa4\x79\xd5\x5b\x8b\xda\xaf\xd8\x3e\x1e\x8f\x5b\x3e\xd3\x64\xb3\x2d\x53\x1a\xfe\x96\x65\x94" +
	"\x47\x58\xb5\x39\xb4\x20\xf5\xb3\xa9\xec\x2c\xb6\xe3\x60\xc8\xaf\xf9\x34\xe4\xa5\xd7\xdb\xf0\x3f\xb1\x25\xfe\x36" +
	"\x47\xb3\x56\x6d\x71\x69\xa4\x47\x3a\x0e\x89\x6b\x73\xb1\xd0\x25\xda\x2f\xc9\x41\x1b\xdb\x82\x5a\x4e\x22\x52\x16" +
	"\x3b\x88\x7f\xb4\xb3\xb2\x05\x7b\x5b\xf1\xc5\xd8\x71\x9a\xc3\x98\xbb\x48\xbf\x3a\xce\x1e\xa2\x66\x06\x1f\xee\x13" +
	"\x7d\x0f\xd7\x89\xbb\x65\xa9\xd7\xd7\xe3\x50\x1b\xdb\x12\x21\xcf\x79\x3c\x50\x6b\x2e\xd9\xe7\xcd\xc4\x51\xbc\x0c" +
	"\x4b\x3e\xd9\x63\x10\x51\x50\xa2\xda\x0c\x1d\xbf\xad\xb9\xd0\xd1\xe5\x93\xf8\xc4\xf8\x9d\x18\x96\xff\x89\xd4\x3c" +
	"\xc9\x4c\x5c\x07\x3a\xdd\xa1\xb5\xc6\xfe\x43\xa5\xaf\x21\x61\x9a\x2e\x55\x58\x7b\xce\xf2\x28\x88\x89\x68\x8b\x62" +
	"\xa3\xb0\xd4\x5d\xef\xbf\x2f\x74\x06\xd5\xe3\x17\x48\x49\x85\x3b\xc6\x7e\x3e\xfc\x56\xe6\x59\xee\xba\x2b\x71\x46" +
	"\x49\x41\xc6\x5d\x34\xed\x55\x0b\x42\xf6\x8e\xef\xe7\x55\xba\xa0\xe5\xcb\xaa\x7c\x8d\x57\xab\xaf\x67\xed\x27\x2d" +
	"\x84\xa9\x42\x42\xfb\xe3\xed\xed\xed\xa9\xff\xa4\xa9\x67\xe6\x49\x43\xab\x74\xfb\xfd\xfe\x59\xba\x25\xfd\xeb\xa0" +
	"\x03\x63\xc5\x6a\x4b\x1c\x0e\xff\x90\x64\x1b\x0e\xdb\x12\xe4\x43\xe8\xf7\xc8\x96\x9e\x9b\x20\x97\x45\x9e\x4b\x61" +
	"\x09\xe9\xfd\xfd\x7d\xf0\x50\x2a\x0c\x0b\x49\xdc\xb3\x2a\xe8\x1c\xf2\xf9\x30\x1b\xe2\x26\x49\xaf\xd6\x18\x4a\x7c" +
	"\x83\x20\x88\xff\xc4\x5c\x1a\xef\x4d\xbb\x50\x50\x7a\xc2\xd6\xce\xc4\x37\x61\xa9\x98\x7d\x54\xc8\xe4\x12\x1f\xc9" +
	"\xef\xf2\x45\x45\x7e\xf1\x25\x5e\x84\x8d\xf7\x30\x39\xe5\x91\x57\xa3\xdd\x0c\xf2\x67\x7a\x36\xd2\xca\xac\x50\x7b" +
	"\xb4\x1b\x4b\x72\xf8\xef\x6f\x00\x00\x00\xff\xff\x43\xc2\xcc\x0a\x6b\x08\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 2155,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556895451, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
