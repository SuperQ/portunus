// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x8f\xe3\x28\x13\xbe\xbf\xbf\x02\xcd\x68\xa4\xb7\x7b\x6d\xcb" +
	"\xe9\x68\xa2\x69\xac\x3d\x45\x9d\x3f\xb1\xbb\x07\x6c\x97\x63\xd4\x18\x2c\xc0\xf9\x58\x94\xff\xbe\x02\x4c\x82\x13" +
	"\xb6\x7b\xe6\xb2\x87\x99\x26\x50\xf5\x54\xd5\x53\x1f\xae\xe7\xec\x19\xd7\xd0\x09\x09\xd9\x33\x26\x9d\x06\x69\x6a" +
	"\x71\xca\x15\xfd\x9b\xf2\x3d\xae\x85\x6c\x41\xe6\xb5\x38\x5d\x7a\x3d\x30\xd3\x09\xae\xed\x1b\xe0\xd5\x66\x3c\x55" +
	"\xee\x67\x47\x06\xca\xce\x38\x27\xe3\xc8\x20\x57\x67\xa5\x61\xc8\x90\xff\x9b\x4f\x34\x43\x8a\x70\x95\x2b\x90\xb4" +
	"\xab\x18\xe5\x90\xf7\x40\xf7\xbd\xc6\xab\xe2\xbb\x03\x45\x94\x8f\x93\xce\xdc\xb1\x9e\xb4\x16\xdc\xc4\xb8\x94\xf7" +
	"\x20\xa9\xbe\x90\x8c\xe0\x4e\x34\x93\xca\x08\xee\xc5\x01\x64\x46\x30\x69\x34\x3d\x80\x69\x04\x13\x12\xd7\x6c\x82" +
	"\x4a\xc3\x49\xe7\x2d\x34\x42\x12\x4d\x05\xc7\x5c\x70\x70\x56\xb2\x5a\xb4\x67\x33\x10\xb9\xa7\x1c\x97\xd5\x48\xda" +
	"\xd6\x06\x58\x5e\x38\x39\x98\x9a\x34\xef\x7b\x29\x26\xde\xe2\xaf\xdb\xed\xb6\x0a\x80\xa4\x79\xb7\xef\xe8\xd9\xcc" +
	"\x3e\xbf\x14\xdf\x25\x0c\x8b\x30\xfc\x95\x13\x9b\x98\x19\xc8\x29\x3f\xd2\x56\xf7\xf8\x47\x59\x8e\xa7\x2a\x18\x44" +
	"\x64\xd2\xe2\x66\x15\x95\x01\x48\xe9\x5c\xe9\x33\x03\xe7\x69\xd5\x52\x35\x32\x72\xc6\x1d\x83\xd3\x0c\x89\x18\x35" +
	"\x07\x90\x9a\x36\x84\xe5\x84\xd1\x3d\xc7\x03\x6d\x5b\x06\xb7\xf7\x42\x8d\xa4\x01\x69\xac\x16\xb6\x86\x6e\x4f\xa8" +
	"\x5f\xdd\x82\xf6\x87\x5c\x06\xfa\xad\x07\x51\x46\xe3\x40\xac\x2a\x31\xc1\x1d\xca\x5d\xc4\x35\x13\xcd\xfb\x4c\xce" +
	"\x9c\x96\x24\xe1\x0f\x71\xc6\xa0\x45\x33\x49\x09\x5c\x2f\x48\xdf\xed\x76\x29\x99\x39\xc1\x59\xea\xc9\xd7\x40\xea" +
	"\xc5\x55\x89\x59\xb8\x79\x19\x08\xe5\xff\x96\x9c\x95\x84\xc1\xe5\x07\xbd\x84\xd3\x63\x04\x45\xad\x79\x9a\x8f\xab" +
	"\xa8\x27\x34\x99\xab\x65\xe1\x57\xc7\x9e\x6a\xc8\x5d\xd6\x30\x17\x47\x49\x46\x9f\x87\xa3\x17\xe0\x42\x0e\x84\xc5" +
	"\xa9\x09\x1e\xd8\x7f\xf9\x28\xe9\x40\xe4\x79\x41\x60\x59\xee\xe6\xc4\x38\xec\xca\x37\x2e\x2e\x1f\xb4\x02\xa5\x0f" +
	"\xf7\x9e\xcf\x87\x6b\x4f\x66\x6c\x6a\xb3\xd9\x5d\x3a\x21\x07\xd4\xd2\x43\x61\x0f\xb9\x14\xc7\xec\x7a\x33\x73\x64" +
	"\x2f\x4d\x4c\x70\xe9\x95\x0a\x29\x8e\x39\x23\x35\xb0\x2b\x9b\x9e\xc6\x5b\xb4\x65\xf1\xc3\xc6\x7b\x27\x8e\xd4\x48" +
	"\xb8\xb7\x07\x52\x0a\x69\x66\xde\x73\x06\x9d\xc6\x65\x61\x73\x37\x53\x20\xa1\x8d\xb4\xfd\x78\xb9\xfa\x67\xaf\x0e" +
	"\x84\x4d\x70\x67\xdf\x17\xc6\xaa\x2c\xbf\xdd\xeb\x62\x2e\xf4\xff\x0b\x6a\xc7\x99\xed\xd7\xa7\x04\xd6\xbd\x88\x79" +
	"\xe8\xf4\x39\x21\xab\xf1\x84\x94\x60\xb4\x45\x6e\xd0\xcc\xf3\x55\x92\x96\x4e\x0a\xaf\xc3\x48\x8d\x68\xb8\x1b\x99" +
	"\x1b\x7b\xb5\xf8\xe5\xbd\x75\x8e\x46\x2e\xbb\x6c\x9a\x19\xde\xb3\xf2\xf5\xf5\xf5\x35\x2d\x3c\x97\x44\xf2\x6d\xce" +
	"\xff\x02\x68\xbd\x5e\x27\x81\xe2\xec\x2c\x35\xb6\x65\x59\x2d\xfa\x7d\xbb\xfd\x0c\x21\x1d\x42\x59\x7e\xaa\xf7\x41" +
	"\x34\xb1\x58\x32\xb0\x00\x7f\x57\xc8\x9f\x24\x3b\x8e\xec\xed\xed\xed\x06\x71\x95\x41\xee\x98\x9e\x1f\x8b\xa9\x3c" +
	"\x57\xcb\x7f\x5d\x3e\x09\x67\xe7\xad\x60\x39\x47\x83\x63\x57\x6f\xd7\x1f\x41\xf8\xdf\x4d\x0f\xcd\x3b\xb4\x59\x42" +
	"\xca\x97\xd8\x2c\xf0\x9b\x6b\x73\x4f\xd4\xcf\x32\xba\xb0\x10\xf6\x98\x5f\x30\x14\x82\x5c\x26\xa6\x6a\x04\xd7\xf6" +
	"\x4b\xf2\xe5\xcf\x97\xcd\x6a\xf5\xe5\x13\xf3\x13\xff\x59\x07\x6c\xe1\x04\x2f\x9e\x7e\xd1\x8d\x32\xe9\x86\xc3\xfd" +
	"\x43\x9f\x47\xf8\xdd\xe1\xd6\xe2\xf4\xd7\x15\xc6\x2d\x3f\x8f\x4a\x77\xf5\x9b\x4b\x20\xad\xe0\xec\xfc\x84\xa2\x0c" +
	"\x34\x93\x54\x42\xe2\x51\x50\xae\x41\x5e\x8a\x8e\x11\xd5\xdf\x8d\xcc\xb0\x58\xb8\x12\x45\xd1\x52\x55\xbc\xf8\x9b" +
	"\xb8\x76\xa3\x2a\x9d\xd1\xfc\xff\x8b\x79\xb1\x28\xf0\xc4\xcc\x58\x28\xaa\xa9\x69\x40\xa9\x84\x6a\xb9\x5d\xaa\x6e" +
	"\x77\xdb\x8b\x26\x35\x03\x73\x9b\xf2\xd5\xad\xf5\x19\x19\x15\xe0\x70\x08\x0f\xf6\xf3\xec\x57\x44\xa7\x8a\x74\x0f" +
	"\xa4\x45\xfa\x3a\x92\x6a\xa1\xb5\x18\x22\xb3\x7e\x5f\x5c\x0a\x23\xdd\x9b\xb8\x05\x6d\xbf\xf8\x9d\xc9\xaf\x07\xf6" +
	"\xe3\x15\x54\xec\x86\xfa\x11\xbe\x6d\xf9\x3b\x59\xa4\x5b\x93\x58\x46\xbd\x50\x61\x27\xa1\xe0\x2a\x04\xfd\x2d\x36" +
	"\xdc\x80\xcd\x6b\x62\x13\xb9\xfc\xef\x9f\x00\x00\x00\xff\xff\xbe\xf2\xf3\x18\x13\x0c\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 3091,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1557171646, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
