// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcd\x8e\xdb\x36\x10\xbe\xf7\x29\x84\x04\x01\x9a\xad\x24\xc8\x6b" +
	"\xc4\x48\x28\xf4\x64\xac\x5f\xa2\xed\x81\x92\x46\x16\xb1\x14\x29\x90\x94\x7f\x4a\xf8\xdd\x0b\xfe\xc8\x26\x6d\xee" +
	"\x6e\x72\xe9\x21\x59\x9a\x9c\xf9\x66\xe6\x9b\x1f\xcd\x53\xfe\x84\x1a\xe8\xb9\x80\xfc\x09\xe1\x5e\x81\xd0\x0d\x3f" +
	"\x15\x92\xfc\x4b\xd8\x1e\x35\x5c\x74\x20\x8a\x86\x9f\x2e\x83\x1a\xa9\xee\x39\x53\xe6\x0d\xd0\x6a\x33\x9d\x6a\xfb" +
	"\xb3\xc7\x23\xa1\x67\x54\xe0\x69\xa2\x50\xc8\xb3\x54\x30\xe6\x99\xfb\x5b\xcc\x24\xcf\x24\x66\xb2\x90\x20\x48\x5f" +
	"\x53\xc2\xa0\x18\x80\xec\x07\x85\x56\xe5\x37\x0b\x9a\x11\x36\xcd\x2a\xb7\xc7\x66\x56\x8a\x33\x1d\xe2\x12\x36\x80" +
	"\x20\xea\x82\x73\x8c\x7a\xde\xce\x32\xc7\x68\xe0\x07\x10\x39\x46\xb8\x55\xe4\x00\xba\xe5\x94\x0b\xd4\xd0\x19\x6a" +
	"\x05\x27\x55\x74\xd0\x72\x81\x15\xe1\x0c\x31\xce\xc0\x5a\xc9\x1b\xde\x9d\xf5\x88\xc5\x9e\x30\x54\xd5\x13\xee\x3a" +
	"\x13\x60\x75\x61\xf8\xa0\x1b\xdc\xbe\xee\x05\x9f\x59\x87\x3e\x6f\xb7\xdb\x7a\x01\xc4\xed\xab\x79\xcf\x9e\xb4\xf7" +
	"\xf9\xb9\xfc\x26\x60\x8c\xc2\x70\x57\x56\x6c\xa6\x7a\xc4\xa7\xe2\x48\x3a\x35\xa0\xef\x55\x35\x9d\xea\xc5\x60\x86" +
	"\x67\xc5\x6f\x56\xb3\x6a\x01\x92\xaa\x90\xea\x4c\xc1\x7a\x5a\x77\x44\x4e\x14\x9f\x51\x4f\xe1\xe4\x21\x33\x4a\xf4" +
	"\x01\x84\x22\x2d\xa6\x05\xa6\x64\xcf\xd0\x48\xba\x8e\xc2\xed\xbd\x94\x13\x6e\x41\x68\xa3\x85\x8c\xa1\xdb\x53\x36" +
	"\xac\x6e\x41\xbb\x43\x21\x16\xfa\x8d\x07\x41\x46\xc3\x40\x8c\x2a\xd6\x8b\x3b\x84\xd9\x88\x1b\xca\xdb\x57\x4f\x8e" +
	"\x4f\x4b\x92\xf0\x87\x38\x43\xd0\xb2\x9d\x85\x00\xa6\x22\xd2\x77\xbb\x5d\x4a\xc6\x27\x38\x4f\x3d\xb9\x1a\x48\xbd" +
	"\xd8\x2a\xd1\x91\x9b\x97\x11\x13\xf6\x56\x72\x56\x02\x46\x9b\x9f\xec\x79\x39\x3d\x46\x50\x36\x8a\xa5\xf9\xb8\x8a" +
	"\x3a\x42\x93\xb9\x8a\x0b\xbf\x3e\x0e\x44\x41\x61\xb3\x86\x18\x3f\x0a\x3c\xb9\x3c\x1c\x9d\x00\xe3\x62\xc4\x34\x4c" +
	"\xcd\xe2\x81\xf9\x57\x4c\x82\x8c\x58\x9c\x23\x02\xab\x6a\xe7\x13\x63\xb1\x6b\xd7\xb8\xa8\x7a\xd0\x5a\x28\x7d\xb8" +
	"\x77\x7c\x3e\x5c\x3b\x32\x43\x53\x9b\xcd\xee\xd2\x73\x31\x66\x1d\x39\x94\xe6\x50\x08\x7e\xcc\xaf\x37\x9e\x23\x73" +
	"\xa9\x43\x82\x2b\xa7\x54\x0a\x7e\x2c\x28\x6e\x80\x5e\xd9\x74\x34\xde\xa2\xad\xca\xef\x26\xde\x3b\xf1\x4c\x4e\x98" +
	"\x39\x7b\x20\x04\x17\xda\xf3\x5e\x50\xe8\x15\xaa\x4a\x93\x3b\x4f\x81\x80\x2e\xd0\x76\xe3\xe5\xea\x9f\xb9\x3a\x60" +
	"\x3a\xc3\x9d\x7d\x57\x18\xab\xaa\xfa\x72\xaf\x8b\x18\x57\xbf\x97\xc4\x8c\x33\xd3\xaf\x5f\x13\x58\xf7\x22\xfa\xa1" +
	"\xd3\x7d\x42\x56\xd3\x29\x93\x9c\x92\x2e\xb3\x83\xc6\xcf\x57\x81\x3b\x32\x4b\xb4\x5e\x46\x6a\x40\xc3\xdd\xc8\xdc" +
	"\x98\xab\xe8\x97\xf3\xd6\x3a\x1a\xb8\x6c\xb3\xa9\x3d\xbc\x63\xe5\xf3\x8f\x1f\x3f\xd2\xc2\xbe\x24\x92\x6f\x3e\xff" +
	"\x11\xd0\x7a\xbd\x4e\x02\x85\xd9\x89\x35\xb6\x55\x55\x47\xfd\xbe\xdd\x7e\x84\x90\x0e\xa1\xaa\x3e\xd4\x7b\x27\x9a" +
	"\x50\x2c\x19\xd8\x02\x7f\x57\xc8\x1f\x24\x3b\x8c\xec\xe5\xe5\xe5\x06\x71\x95\xc9\xec\x31\x3d\x3f\xa2\xa9\xec\xab" +
	"\xe5\xff\x2e\x9f\x84\xb3\x7e\x2b\x88\xe7\xe8\xe2\xd8\xd5\xdb\xf5\x7b\x10\xee\x77\x3b\x40\xfb\x0a\x5d\x9e\x90\x72" +
	"\x25\xe6\x05\xfe\xb0\x6d\xee\x88\xfa\x59\x46\x23\x0b\xcb\x1e\xf3\x0b\x86\x96\x20\xe3\xc4\xd4\x2d\x67\xca\x7c\x49" +
	"\x3e\xfd\xfd\xbc\x59\xad\x3e\x7d\x60\x7e\x66\x3f\xeb\x80\x29\x9c\xc5\x8b\xaf\xbf\xe8\x46\x95\x74\xc3\xe2\xfe\xa5" +
	"\xce\x13\xfc\x69\x71\x1b\x7e\xfa\xe7\x0a\x63\x97\x9f\x84\x12\x76\x24\xc7\x5f\xc8\x37\xe5\xfc\xd6\xf5\xf6\x7b\xd8" +
	"\x70\x49\x01\xd7\xc9\xc1\x96\xf6\x38\x4e\xca\x9e\x62\x39\xdc\x8d\xe4\x65\x71\xb1\x2d\x90\x05\x4b\x5b\xf9\xec\x6e" +
	"\xc2\xde\x08\xba\xc0\xa3\xb9\xff\xa3\x79\x14\x35\x50\x62\x26\x45\x8a\x72\x6e\x5b\x90\x32\xa1\x5a\x6d\x63\xd5\xed" +
	"\x6e\x7b\x51\xb8\xa1\xa0\x6f\x5f\x91\x20\x48\x8a\x27\x09\x68\x39\x2c\x0f\xe6\xf3\xef\x56\x50\xab\x9a\xa9\x01\x70" +
	"\x97\xa9\xeb\xc8\x6b\xb8\x52\x7c\x0c\xcc\xba\x7d\x34\x16\xce\xd4\xa0\xc3\x16\xb7\xfd\xe8\x45\xcc\xc6\xfb\x1e\x9e" +
	"\x19\x21\x77\xb2\x99\xea\x74\x62\xb9\x75\x42\xa5\x49\x34\x67\x72\x09\xf2\x8b\x5b\xfe\xdc\x9e\xd3\x02\x53\x20\x12" +
	"\x9b\xcd\xe5\xb7\xff\x02\x00\x00\xff\xff\x36\xcf\x7e\x34\x63\x0c\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 3171,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556991499, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
