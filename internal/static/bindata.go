// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xd1\x6e\xe3\x2a\x10\x7d\xbf\x5f\x81\xb4\xda\x97\xca\x58\x64\xa3" +
	"\xad\xb6\xf8\x31\x52\xfe\x63\x6c\xc6\x31\x2a\x06\x0b\x70\xe2\x5c\xe4\x7f\xbf\xc2\xd8\x8d\xbd\x71\xaa\xfb\x50\x95" +
	"\x30\x67\x86\x39\xe7\xc0\xf8\x2d\x7b\xe3\x25\xd6\xc6\x62\xf6\xc6\xa1\xf6\x68\x43\x69\x06\xea\xe4\xbf\x52\x5f\x78" +
	"\x69\xac\x40\x4b\x4b\x33\x8c\x8d\x6f\x55\xa8\x8d\xf6\x31\x86\xfc\xf0\xde\x0d\xc5\xf4\xb3\x86\x56\xaa\x3b\xa7\xd0" +
	"\x75\x0a\xa9\xbb\x3b\x8f\x6d\x46\xd2\x7f\xda\xcb\x8c\x38\xd0\x8e\x3a\xb4\xb2\x2e\x94\xd4\x48\x1b\x94\x97\xc6\xf3" +
	"\x43\xfe\x7b\x84\x0c\x78\x6d\xaa\xde\x65\xc0\x1b\x73\x45\x9b\x01\x87\xca\xcb\x2b\x86\xca\x28\x63\x79\xa9\x7a\x2c" +
	"\x3c\x0e\x9e\x0a\xac\x8c\x05\x2f\x8d\xe6\xda\x68\x9c\xfa\xc9\x4a\x23\xee\xa1\x05\x7b\x91\x9a\xb3\xa2\x03\x21\x62" +
	"\xd7\x6c\xd4\x70\x0d\x25\x54\x9f\x17\x6b\x7a\x2d\xf8\x8f\xd3\xe9\x54\x2c\x05\xa1\xfa\x8c\x71\xf2\x16\xe6\x46\x7e" +
	"\xe5\xbf\x2d\xb6\x9b\xde\xd2\xd6\x04\xeb\x55\x68\x61\xa0\x37\x29\x7c\xc3\xff\x30\xd6\x0d\xc5\x72\x20\x81\xde\x9b" +
	"\xc7\xa9\x85\x92\xce\x53\xe7\xef\x0a\xa7\x16\x0b\x21\x5d\xa7\xe0\xce\x6b\x85\xc3\x5c\x8b\x28\x19\xae\x68\xbd\xac" +
	"\x40\x51\x50\xf2\xa2\x79\x2b\x85\x50\xf8\x88\xe7\xae\x83\x0a\x6d\x88\x59\x3c\x9e\xf0\x08\x91\xe6\xf0\x60\x9b\x16" +
	"\xd4\x2e\x62\x46\x0e\x2b\x7f\xd6\x0c\x62\x2a\x84\xa5\x1d\xa9\x27\xaa\xa5\x32\xd5\xe7\xac\x8a\xd4\x0d\x5a\xe9\x77" +
	"\x95\x7e\x10\x24\xec\xa9\x68\x5e\xf5\xd6\xa2\xf6\x1b\xb5\xcf\xe7\xf3\x1e\x66\x76\x36\xdb\x0b\x25\xf3\xf7\x22\xd3" +
	"\xf5\x08\x9b\x36\xc7\x16\xa4\x7e\xe5\xca\xc1\x62\x3b\x19\x43\x7e\x2d\xab\x31\x2f\xbd\xde\xa7\xff\xc5\x2d\xe9\xb7" +
	"\x6b\xcd\xf6\xd6\x16\xb7\x46\x7a\xa4\x93\x49\x5c\x9b\x9b\x85\x2e\xc9\x7e\x4b\x00\x6d\x6c\x0b\x6a\xed\x44\x94\x2c" +
	"\x76\x10\xff\x68\x67\x65\x0b\xf6\xbe\xd1\x8b\xb1\xf3\xec\xc3\x54\xbb\x48\xaf\x8e\xb3\xa7\xac\x45\xc1\xa7\xfd\x24" +
	"\xdf\xd3\x76\xd2\x6e\x7d\xd4\xfb\xfb\x79\xac\x8d\x6d\x89\x90\xd7\x3c\x2e\xa8\x35\xb7\xb0\x96\x8e\x3d\xc7\x89\x82" +
	"\x12\xd5\x97\x80\x49\xb9\x07\x41\x96\xff\x89\x14\x5f\xa4\x11\xd7\x81\x4e\x7b\x68\xad\xb1\x61\x96\x9c\x2a\xac\x3d" +
	"\x67\x79\x74\x69\x66\x6f\x51\xec\x54\x91\xba\xeb\xfd\x5f\x87\x27\xdf\x0f\x8c\xfd\x5c\x39\x78\x9c\xda\x4f\x46\xce" +
	"\x12\x1e\xba\x81\x38\xa3\xa4\x20\xd3\x08\x98\xc7\x99\x05\x21\x7b\xc7\x8f\xdd\xf0\xea\xb8\x24\x68\x98\xf1\xa9\xbb" +
	"\x1f\x1f\x1f\x1f\x2f\xf1\xb3\x31\xaf\xc2\xb3\x11\x9b\x72\xc7\xe3\xf1\x55\xb9\xb5\x5c\xdb\xa4\x13\x63\xc5\xe6\xa9" +
	"\x9d\x4e\xff\xa3\xc8\x3e\x1d\xb6\x67\xf5\x53\xea\xf7\xcc\xd6\xc8\x5d\x92\x8c\x8d\x1e\x4a\x85\x61\x65\xd9\x03\xa2" +
	"\xa0\x73\xc8\x97\xc5\x12\x88\x6f\x2b\xcd\xf1\x29\x95\xf8\x06\x41\x10\xff\x45\xa0\x34\xde\x9b\x76\x65\x6e\x1a\xea" +
	"\x5b\x30\xf1\x4d\x58\x3f\xdc\x78\x3b\x16\x48\xfc\x6c\x7c\x57\x2f\x5e\x96\xbf\xb0\xc4\x8b\xb0\xf3\x85\x48\xa0\x3c" +
	"\x8a\x64\xb4\x5b\x48\xfe\x4c\x83\x34\x0d\x91\x0a\xb5\x47\xbb\x33\x36\xc6\x7f\xfe\x0b\x00\x00\xff\xff\xda\x5f\x29" +
	"\x69\x7d\x07\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 1917,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556821555, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
