// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css
// static/test.html

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcd\x8e\xdb\x36\x10\xbe\xf7\x29\x84\x04\x01\x9a\xad\x24\xc8\x6b" +
	"\xc4\x48\x28\xf4\x64\xac\x5f\xa2\xed\x81\x92\x46\x16\xb1\x14\x29\x90\x94\x7f\x4a\xf8\xdd\x0b\xfe\xc8\x26\x6d\xee" +
	"\x6e\x72\xe9\x61\xd7\x12\x39\xf3\xcd\xcc\x37\x3f\x9a\xa7\xfc\x09\x35\xd0\x73\x01\xf9\x13\xc2\xbd\x02\xa1\x1b\x7e" +
	"\x2a\x24\xf9\x97\xb0\x3d\x6a\xb8\xe8\x40\x14\x0d\x3f\x5d\x06\x35\x52\xdd\x73\xa6\xcc\x1d\xa0\xd5\x66\x3a\xd5\xf6" +
	"\xb5\xc7\x23\xa1\x67\x54\xe0\x69\xa2\x50\xc8\xb3\x54\x30\xe6\x99\xfb\x2d\x66\x92\x67\x12\x33\x59\x48\x10\xa4\xaf" +
	"\x29\x61\x50\x0c\x40\xf6\x83\x42\xab\xf2\x9b\x05\xcd\x9e\x74\x88\x43\xd8\x00\x82\xa8\x0b\xce\x31\xea\x79\x3b\xcb" +
	"\x1c\xa3\x81\x1f\x40\xe4\x18\xe1\x56\x91\x03\xe8\x96\x53\x2e\x50\x43\x67\xa8\x15\x9c\x54\xd1\x41\xcb\x05\x56\x84" +
	"\x33\xc4\x38\x03\x8b\x9a\x37\xbc\x3b\xeb\x11\x8b\x3d\x61\xa8\xaa\x27\xdc\x75\x26\xa0\xea\xc2\xf0\x41\x37\xb8\x7d" +
	"\xdd\x0b\x3e\xb3\x0e\x7d\xde\x6e\xb7\xf5\x02\x88\xdb\x57\x73\x9f\x3d\x69\xef\xe3\x73\xf9\x4d\xc0\x18\xb9\xed\x8e" +
	"\xac\xd8\x4c\xf5\x88\x4f\xc5\x91\x74\x6a\x40\xdf\xab\x6a\x3a\xd5\x8b\xc1\x0c\xcf\x8a\xdf\xac\x66\xd5\x02\x24\x55" +
	"\x21\xd5\x99\x82\xf5\xb4\xee\x88\x9c\x28\x3e\xa3\x9e\xc2\xc9\x43\x66\x94\xe8\x03\x08\x45\x5a\x4c\x0b\x4c\xc9\x9e" +
	"\xa1\x91\x74\x1d\x85\xdb\x7d\x29\x27\xdc\x82\xd0\x46\x0b\x19\x43\xb7\xab\x6c\x58\xdd\x82\x76\x0f\x85\x58\xe8\x36" +
	"\x1e\x04\x19\x0c\x03\x31\xaa\x58\x2f\xee\x10\x66\x23\x6e\x28\x6f\x5f\x3d\x39\x3e\x2d\x49\xc2\x1f\xe2\x0c\x41\xcb" +
	"\x76\x16\x02\x98\x8a\x48\xdf\xed\x76\x29\x19\x9f\xe0\x3c\x75\xe5\x6a\x20\x75\x63\xab\x44\x47\x6e\x5e\x46\x4c\xd8" +
	"\x5b\xc9\x59\x09\x18\x6d\x7e\xb2\xe7\xe5\xe9\x31\x82\xb2\x51\x2c\xcd\xc7\x55\xd4\x11\x9a\xcc\x55\x5c\xe8\xf5\x71" +
	"\x20\x0a\x0a\x9b\x35\xc4\xf8\x51\xe0\xc9\xe5\xe1\xe8\x04\x18\x17\x23\xa6\x61\x6a\x16\x0f\xcc\x5f\x31\x09\x32\x62" +
	"\x71\x8e\x08\xac\xaa\x9d\x4f\x8c\xc5\xae\x5d\xa3\xa2\xea\x41\x6b\xa1\xf4\xe1\xdc\xf1\xf9\x70\xec\xc8\x0c\x4d\x6d" +
	"\x36\xbb\x4b\xcf\xc5\x98\x75\xe4\x50\x9a\x87\x42\xf0\x63\x7e\x3d\xf1\x1c\x99\x43\x1d\x12\x5c\x39\xa5\x52\xf0\x63" +
	"\x41\x71\x03\xf4\xca\xa6\xa3\xf1\x16\x6d\x55\x7e\x37\xf1\xde\x89\x67\x72\xc2\xcc\xd9\x03\x21\xb8\xd0\x9e\xf7\x82" +
	"\x42\xaf\x50\x55\x9a\xdc\x79\x0a\x04\x74\x81\x36\x61\xd3\xac\x6e\xfe\x99\xa3\x03\xa6\x33\xdc\xd9\x77\x85\xb1\xaa" +
	"\xaa\x2f\xf7\xba\x88\x71\xf5\x7b\x49\xcc\xf8\x32\xfd\xfa\x35\x81\x75\x2f\xa2\x1f\x3a\xdd\x27\x64\x35\x9d\x32\xc9" +
	"\x29\xe9\x32\x3b\x68\xfc\x3c\x15\xb8\x23\xb3\x44\xeb\x65\x84\x06\x34\xdc\x8d\xc8\x8d\x39\x8a\xde\x9c\xb7\xd6\xd1" +
	"\xc0\x65\x9b\x4d\xed\xe1\x1d\x2b\x9f\x7f\xfc\xf8\x91\x16\xf6\x25\x91\xbc\xf3\xf9\x8f\x80\xd6\xeb\x75\x12\x28\xcc" +
	"\x4e\xac\xb1\xad\xaa\x3a\xea\xf7\xed\xf6\x23\x84\x74\x08\x55\xf5\xa1\xde\x3b\xd1\x84\x62\xc9\xc0\x16\xf8\xbb\x42" +
	"\xfe\x20\xd9\x61\x64\x2f\x2f\x2f\x37\x88\xab\x4c\x66\x1f\xd3\xf3\x23\x9a\xca\xbe\x5a\xfe\xef\xf2\x49\x38\xeb\xb7" +
	"\x80\x78\x8e\x2e\x8e\x5d\xbd\x5d\xbf\x07\xe1\xde\xdb\x01\xda\x57\xe8\xf2\x84\x94\x2b\x31\x2f\xf0\x87\x6d\x73\x47" +
	"\xd4\xcf\x32\x1a\x59\x58\xf6\x96\x5f\x30\xb4\x04\x19\x27\xa6\x6e\x39\x53\xe6\x4b\xf2\xe9\xef\xe7\xcd\x6a\xf5\xe9" +
	"\x03\xf3\x33\xfb\x59\x07\x4c\xe1\x2c\x5e\x7c\xfd\x45\x37\xaa\xa4\x1b\x16\xf7\x2f\x75\x9e\xe0\x4f\x8b\xdb\xf0\xd3" +
	"\x3f\x57\x18\xbb\xfc\x24\x94\xb0\x23\x39\xfe\x42\xbe\x29\xe7\xb7\xae\xb7\xef\xc3\x86\x4b\x0a\xb8\x4e\x0e\xb6\xb4" +
	"\xc7\x71\x52\xf6\x14\xcb\xe1\x6e\x24\x2f\x8b\x8b\x6d\x81\x2c\x58\xda\xca\x67\x77\x12\xf6\x46\xd0\x05\x1e\xcd\xfd" +
	"\x8f\xe6\x51\xd4\x40\x89\x99\x14\x29\xca\xb9\x6d\x41\xca\x84\x6a\xb5\x8d\x55\xb7\xbb\xed\x45\xe1\x86\x82\xbe\x7d" +
	"\x45\x82\x20\x29\x9e\x24\xa0\xe5\x61\xb9\x30\x9f\x7f\xb7\x82\x5a\xd5\x4c\x0d\x80\xbb\x4c\x5d\x47\x5e\xc3\x95\xe2" +
	"\x63\x60\xd6\xed\xa3\xb1\x70\xa6\x06\x1d\xb6\xb8\xed\x47\x2f\x62\x36\xde\xf7\xf0\xcc\x08\xb9\x93\xcd\x54\xa7\x13" +
	"\xcb\xad\x13\x2a\x4d\xa2\x39\x93\x4b\x90\x5f\xdc\xf2\xe7\xf6\x9c\x16\x98\x02\x91\xd8\x6c\x2e\xbf\xfd\x17\x00\x00" +
	"\xff\xff\xd8\x29\x42\x57\x53\x0c\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 3155,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556985532, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTesthtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xbd\x4e\xc3\x30\x10\xc7\xf7\x3e\xc5\x71\x7b\xf1\x8e\x9c\x2c\x94" +
	"\x15\x90\xca\xc2\xe8\x3a\x17\x62\xd5\x5f\xf2\x9d\x2b\xfa\xf6\xa8\x49\x94\x16\x14\x09\xc1\x96\xfc\x3f\x7c\x3f\x5b" +
	"\xa7\xef\x76\x2f\x8f\x6f\xef\xaf\x4f\x30\x48\xf0\xed\x46\x7b\x17\x8f\x50\xc8\x37\xc8\x72\xf6\xc4\x03\x91\x20\x0c" +
	"\x85\xfa\x06\x15\x8b\x11\x67\x95\x65\x56\x39\x15\xa9\xb1\xf2\xbd\x65\xc6\x76\xa3\x83\x71\xb1\xdd\x00\xe8\x3e\x95" +
	"\x70\xf9\x00\xd0\xb9\xdd\x8f\x85\x07\xad\xf2\x2c\x75\xee\x04\xd6\x1b\xe6\x06\x9d\x50\xd8\x7a\xc7\x82\x93\x07\xa0" +
	"\x39\x9b\x78\x6b\xc3\x98\xa9\xd1\x0e\x64\x8f\xd4\x61\xfb\x9c\x04\x98\x3c\x59\xa1\x4e\xab\x4b\xfc\x97\xee\xd2\xdc" +
	"\xaf\xb4\xb4\xea\xdc\x69\x61\xdd\x9d\xa3\x09\x7f\x80\x75\x31\x57\x01\x39\x67\x6a\x70\x1c\x73\x48\x9f\x08\xd1\x04" +
	"\x6a\xf0\xa3\xa4\x9a\x19\xe1\x64\x7c\xa5\x06\x7b\x57\x58\xb6\xe3\x0f\x82\xeb\x66\x01\x61\xa6\x5b\x8e\xf4\xe6\x40" +
	"\x1e\xfa\x54\xae\x89\xeb\xf8\x9f\xb7\x1f\xc3\xff\xa1\x61\xb2\x29\x76\xb7\x38\x93\x82\x6b\x1c\xb3\xf5\x1d\x64\xbf" +
	"\x06\xb1\xbc\xa6\x56\xd3\x0e\x68\x35\x2d\xc5\x57\x00\x00\x00\xff\xff\xab\x2c\x88\xae\x64\x02\x00\x00")

func bindataTesthtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataTesthtml,
		"test.html",
	)
}



func bindataTesthtml() (*asset, error) {
	bytes, err := bindataTesthtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "test.html",
		size: 612,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556981164, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
	"test.html":        bindataTesthtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
	"test.html": {Func: bindataTesthtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
