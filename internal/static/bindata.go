// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdb\x6e\xdb\x38\x13\xbe\xff\x9f\x42\x68\x51\xe0\x6f\x6a\x0a\xb2" +
	"\x83\x06\x2d\x85\xed\x8d\x11\xbf\xc4\xee\x5e\x50\xe2\xc8\x22\x42\x91\x02\x49\xf9\x50\xc1\xef\xbe\xe0\x41\x36\x69" +
	"\xab\x71\x82\x02\xbb\x17\x89\x25\x72\xe6\x9b\x23\x47\x1f\x1f\x16\x0f\xb8\x82\x46\x2a\x58\x3c\x60\xd2\x18\x50\x63" +
	"\x25\x0f\x48\xb3\x9f\x4c\x6c\x71\x25\x15\x05\x85\x2a\x79\x38\xb5\xa6\xe3\x63\x23\x85\xb1\x7b\x80\x97\x4f\xfd\xa1" +
	"\x74\xaf\x0d\xe9\x18\x3f\x62\x44\xfa\x9e\x03\xd2\x47\x6d\xa0\x5b\x64\xfe\x17\x0d\x6c\x91\x69\x22\x34\xd2\xa0\x58" +
	"\x53\x72\x26\x00\xb5\xc0\xb6\xad\xc1\xcb\xfc\xab\x03\xcd\x98\xe8\x07\xb3\x70\x8f\xd5\x60\x8c\x14\x63\x8c\xcb\x44" +
	"\x0b\x8a\x99\x13\x59\x10\xdc\xc8\x7a\xd0\x0b\x82\x5b\xb9\x03\xb5\x20\x98\xd4\x86\xed\x60\xac\x25\x97\x0a\x57\x7c" +
	"\x80\xd2\xc0\xc1\x20\x0a\xb5\x54\xc4\x30\x29\xb0\x90\x02\x4e\x79\x2d\xbb\x8e\x20\x0d\x3d\x51\xc4\x00\x45\x9c\x69" +
	"\xf3\xc3\xaf\x62\x4e\xb4\x41\x75\xcb\x38\x1d\x29\xd3\x3d\x27\xc7\xa0\xd4\x0d\x06\x68\xc0\xde\x2a\x72\x74\xce\x2e" +
	"\x2a\x49\x8f\x63\x47\xd4\x96\x09\x5c\x94\x3d\xa1\xd4\xe6\xa9\x38\x09\xb2\x1b\x2b\x52\xbf\x6c\x95\x1c\x04\xc5\x1f" +
	"\xd7\xeb\x75\x39\xf9\x45\xea\x17\xbb\x9f\x3d\x8c\x21\xf4\x55\xfe\x55\x41\x97\x64\xc3\x2f\x39\xb1\x81\x8f\x1d\x39" +
	"\xa0\x3d\xa3\xa6\xc5\xdf\x8a\xa2\x3f\x94\x93\xc1\x8c\x0c\x46\x5e\xac\x66\xc5\x04\xa4\x0d\xd2\xe6\xc8\xc1\xf9\x5e" +
	"\x4e\x81\x34\x1c\x0e\x01\x32\xe3\x6c\xdc\x81\x32\xac\x26\x1c\x11\xce\xb6\x02\x77\x8c\x52\x0e\x97\xfd\x5c\xf7\xa4" +
	"\x06\x35\x5a\x2d\x6c\x0d\x5d\xb6\xb2\x76\x79\x09\xda\x3f\x20\x35\x55\xd1\x7a\x10\x35\x46\x1c\x88\x55\x25\xe7\xbc" +
	"\x32\xe1\x22\xae\xb8\xac\x5f\x42\x72\x42\x75\x67\xeb\x76\x13\x67\x0c\x9a\xd7\x83\x52\x20\x4c\x92\xf4\xcd\x66\x13" +
	"\xcb\x84\xfe\x58\xc4\x4b\xbe\x75\xe2\x15\xd7\x54\x09\xcc\xf3\xf3\x73\xea\xde\xa9\x23\x4c\xbc\x5e\x94\x6c\xa5\xa0" +
	"\x9b\x2f\x8f\xd3\xce\xf7\x8c\x42\x04\xb1\x5c\x59\x8c\x53\x5e\x19\x31\x9f\x9f\x33\x8a\x4f\xf0\x6c\xed\xd2\xf3\x54" +
	"\xee\x5b\x66\x00\xb9\x2a\x62\x21\xf7\x8a\xf4\xbe\x2e\x7b\x2f\x20\xa4\xea\x08\x8f\x4b\x65\x9d\xb3\x1e\xd8\x3f\xd4" +
	"\x2b\xd6\x11\x75\x4c\x32\x51\x14\x9b\x90\x09\x87\x5d\xfa\x79\x80\x8b\x1b\xad\x29\xd5\x37\xeb\x3e\xdf\x37\xcb\xb7" +
	"\x49\x7f\x7a\xda\x9c\x1a\xa9\xba\x1f\x0f\xe7\x4e\x0b\xef\x5f\xa6\x15\x64\x64\x8f\x7d\x4a\xed\x4e\x96\x2b\xb9\x47" +
	"\x9c\x54\xc0\xcf\x29\xf4\xb9\xbb\x84\x58\xe4\xdf\x66\xc4\x33\xdd\x13\x91\xdb\x45\x04\x4a\x49\x35\x86\x64\x23\x0e" +
	"\x8d\xc1\x45\x6e\x6b\x19\xe2\x56\x40\x23\x6d\x3f\xaa\xdc\x3b\x65\x3b\xb7\xb4\x23\x7c\x80\x2b\xfb\xa1\xc4\x45\xf1" +
	"\xe9\x5a\x17\x0b\x69\xfe\x9f\x33\x3b\x1a\xed\xa1\xfd\x3c\x83\x75\x2d\x32\xde\x1c\xf7\x50\x85\x65\x7f\xc8\xb4\xe4" +
	"\x8c\x66\x6e\xda\x84\x59\xad\x08\x65\x83\xc6\x8f\xd3\x78\x8e\xd2\x70\x35\x7e\x9f\xec\x52\xf2\xe6\xbd\x75\x8e\x46" +
	"\x2e\xbb\x12\x8e\x01\xde\x67\xe5\xe3\xf7\xef\xdf\xe7\x85\x43\x1f\xcc\xee\x85\xa2\x27\x40\x8f\x8f\x8f\xb3\x40\x71" +
	"\x75\x52\x8d\x75\x51\x94\xc9\xa1\x5f\xaf\xef\x21\xcc\x87\x50\x14\x77\xf5\x5e\x89\x26\x16\x9b\x0d\x6c\x82\xb7\xc5" +
	"\x0d\xed\x81\x94\xdc\xdf\x29\xf6\xd5\x1c\xba\x40\x9c\x65\x32\xf7\x38\x3f\x34\x92\xd1\x1c\xba\xe5\xdf\x6e\x9f\x19" +
	"\x67\x03\xc3\x18\xd3\x99\x3f\x1d\xba\xc9\xdb\xc7\xd7\x20\xfc\x7b\xdd\x42\xfd\x02\x74\x31\x23\xe5\x5b\x2c\x08\x7c" +
	"\x71\xc7\xdc\x27\xea\xad\x19\x4d\x2c\x4c\x9c\xe8\x1d\x86\xa6\x20\xd3\xc2\x94\xb5\x14\x06\x84\xc1\x1f\xfe\x5a\x3d" +
	"\x2d\x97\x1f\xee\x98\x1f\xc4\x5b\x1d\xb0\x8d\x33\x79\xf1\xf9\x9d\x6e\x14\xb3\x6e\x38\xdc\x3f\xcd\xb1\x87\x3f\x1c" +
	"\x6e\x25\x0f\x7f\x8f\xa4\xef\x81\x28\x22\xea\x40\x2d\x50\x27\x7f\xa2\x9b\xc5\x3d\x54\x2f\xcc\xdc\xac\xc7\x84\xaa" +
	"\x9c\x21\x4d\x6f\x74\x22\x1c\xc3\x28\xc8\x5f\xa6\xe5\x5a\xd3\x9d\xcc\xa4\x1b\xe6\xa7\x4f\x02\x75\x75\x28\x91\x02" +
	"\x42\xa5\xe0\xc7\xcf\x59\x04\x54\x0f\x4a\x4b\x85\x7b\xc9\x84\x01\x15\x4f\x92\x46\x2a\xd4\x30\xe0\x54\xc3\x7f\x90" +
	"\xce\xbb\x3e\x9c\x5b\x77\xda\xff\xe1\xa2\xc2\x0d\x53\x13\x13\x7e\x4f\x2b\xdf\xb7\x97\x76\xea\xef\x59\x2d\x7e\xd7" +
	"\xaa\x65\x13\x09\xcf\x77\x70\xd3\xf6\x38\x11\x9c\x78\x6a\x66\x45\xb6\x3c\x8f\xa6\x0b\x50\x4a\x53\xb2\xc4\xc2\x3c" +
	"\x5f\xf9\x75\xe8\x63\x2f\x35\x73\xc4\x57\x01\x27\xb6\xd9\x4b\xab\x1b\x98\x88\x63\x25\xc8\xfa\x50\xa6\x3c\xe3\xb6" +
	"\x07\xca\xb4\x2d\x13\x5e\xbe\x3a\x13\xf5\x40\x08\x2b\xc9\xe9\x3d\xcf\xa6\xa2\xbc\x3e\xac\xfd\xbd\xcd\x7e\xde\xe2" +
	"\xd0\x3d\xbf\x6c\x38\xd1\xed\x38\xef\xb8\x4b\x4e\x16\xf9\x9f\xaf\xfc\x4a\xfc\xa5\x8a\xbe\x49\x01\xcd\xff\x4f\xd8" +
	"\x41\xf2\x39\x9b\x61\x08\x89\xa2\x1e\xea\x1a\xb4\x9e\x51\x2d\xd6\xa9\xea\x7a\xb3\x3e\x19\x52\x71\x18\x2f\x9c\xae" +
	"\xbc\xcc\x10\x4e\x7a\x0d\x78\x7a\x98\x36\x2c\x03\xf7\x27\xd2\xa9\x66\xa6\x05\x42\x33\x73\x26\x20\x95\x34\x46\x76" +
	"\x91\x59\x7f\x45\x4c\x85\x33\xd3\x8e\xf1\x07\xd7\x26\xdc\x5f\x93\xfc\x0d\xc0\x36\xc5\xa4\x62\x2f\xa5\xaf\xe1\xdb" +
	"\x0f\xfc\x95\x6c\x66\xe8\x38\x73\xff\xf4\x42\xb9\x1d\xb8\x52\xe8\x29\xe8\x4f\xb1\xe1\x1a\x5c\x67\xdd\x5e\x36\x4e" +
	"\xff\xfb\x27\x00\x00\xff\xff\xf3\x8a\x3a\x06\x4d\x10\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 4173,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1562435748, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
