// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x6f\xdc\x38\x0f\xbe\xbf\xbf\xc2\x68\x51\xe0\x4d\xd6\x32\x3c" +
	"\x09\x1a\x34\x32\xf6\x34\xc8\xfc\x89\xdd\x3d\xc8\x36\x1d\x0b\x91\x25\x43\x92\xe7\xa3\xc2\xfc\xf7\x85\x3e\x3c\x23" +
	"\x79\xdc\x24\xbd\xec\xa1\x8d\x86\x22\x1f\x92\x0f\x45\x9a\xf7\xf9\x3d\xae\xa1\x13\x12\xf2\x7b\x4c\x3a\x0d\xd2\xd4" +
	"\xe2\x88\x14\xfd\x49\xf9\x2b\xae\x85\x6c\x41\xa2\x5a\x1c\xcf\xbd\x1e\x98\xe9\x04\xd7\xf6\x0e\xf0\xe6\x69\x3c\x56" +
	"\xee\x67\x47\x06\xca\x4e\x18\x91\x71\x64\x80\xd4\x49\x69\x18\xf2\xcc\xff\x45\x13\xcd\x33\x45\xb8\x42\x0a\x24\xed" +
	"\x2a\x46\x39\xa0\x1e\xe8\x6b\xaf\xf1\xa6\xf8\xee\x40\x33\xca\xc7\x49\xe7\xee\x58\x4f\x5a\x0b\x6e\x62\x5c\xca\x7b" +
	"\x90\x54\x9f\x49\x4e\x70\x27\x9a\x49\xe5\x04\xf7\x62\x0f\x32\x27\x98\x34\x9a\xee\xc1\x34\x82\x09\x89\x6b\x36\x41" +
	"\xa5\xe1\xa8\x51\x0b\x8d\x90\x44\x53\xc1\x31\x17\x1c\x9c\x97\xbc\x16\xed\xc9\x0c\x44\xbe\x52\x8e\xcb\x6a\x24\x6d" +
	"\x6b\x13\x2c\xcf\x9c\xec\x4d\x4d\x9a\xb7\x57\x29\x26\xde\xe2\xaf\xdb\xed\xb6\x9a\x01\x49\xf3\x66\xef\xb3\x7b\x13" +
	"\x62\x7e\x28\xbe\x4b\x18\x92\x34\xbc\xc8\xa9\x4d\xcc\x0c\xe4\x88\x0e\xb4\xd5\x3d\xfe\x51\x96\xe3\xb1\x9a\x1d\x66" +
	"\x64\xd2\xe2\xea\x35\x2b\x67\x20\xa5\x91\xd2\x27\x06\x2e\xd2\xaa\xa5\x6a\x64\xe4\x84\x3b\x06\xc7\x00\x99\x31\x6a" +
	"\xf6\x20\x35\x6d\x08\x43\x84\xd1\x57\x8e\x07\xda\xb6\x0c\xae\xf7\x85\x1a\x49\x03\xd2\x58\x2b\x6c\x1d\x5d\xaf\xb2" +
	"\x7e\x73\x4d\xda\x1f\x90\x9c\xe9\xb7\x11\x44\x15\x8d\x13\xb1\xa6\xc4\xcc\xe1\x50\xee\x32\xae\x99\x68\xde\x02\x39" +
	"\xa1\x2c\xab\x84\xdf\xe4\x19\x83\x16\xcd\x24\x25\x70\x9d\x90\xbe\xdb\xed\x62\x9d\x50\xd8\x3c\x16\xf9\x9a\xc7\x12" +
	"\xf7\x1a\x12\x98\x97\x97\x97\x34\xbc\xf3\x40\x28\xff\x55\x51\x36\x12\x06\x57\x97\xec\x61\x3e\xdd\x46\x6e\x01\x8a" +
	"\x03\x6d\x21\x42\xd9\x3c\x58\x98\x73\x51\x6b\xbe\x4e\xd1\x05\xc5\x73\xbc\x5a\xbe\xb4\x17\xaa\x43\x4f\x35\x20\x57" +
	"\x48\xcc\xc5\x41\x92\xd1\x97\xe6\xe0\x15\xb8\x90\x03\x61\x71\xb5\x6c\x70\x36\x02\xfb\x0f\x8d\x92\x0e\x44\x9e\x12" +
	"\x32\xca\x72\x17\xc8\x70\xd8\x95\xef\x65\x5c\xde\x58\xcd\x6c\xdf\xc8\x3d\xe5\x37\xe2\x5b\xde\x9f\x9e\x76\xe7\x4e" +
	"\xc8\x21\x6b\xe9\xbe\xb0\x07\x24\xc5\x21\xbf\x48\x02\x47\x56\x68\x62\xee\x4b\x6f\x54\x48\x71\x40\x8c\xd4\xc0\x2e" +
	"\x6c\x7a\x1a\xaf\xd9\x96\xc5\x0f\x9b\xef\x42\x3d\x53\x23\xe1\xde\x1f\x48\x29\xa4\x09\xbc\x23\x06\x9d\xc6\x65\x61" +
	"\xcb\x1a\x28\x90\xd0\x46\xd6\x7e\xe2\x5c\xe2\xb3\xa2\x3d\x61\x13\x2c\xfc\x87\x6a\x97\xe5\xb7\xa5\x2d\xe6\x42\xff" +
	"\xbf\xa0\x76\xc2\xd9\x16\xbe\x5b\xc1\x5a\xaa\x98\x9b\xe6\x0f\x05\xd9\x8c\xc7\x4c\x09\x46\xdb\xcc\xcd\x9e\x30\x72" +
	"\x25\x69\xe9\xa4\xf0\xe3\x3c\x65\x23\x1a\x16\x53\xf4\xc9\x8a\x92\x5f\x3e\x5a\x17\x68\x14\xb2\xab\xa6\x09\xf0\x9e" +
	"\x95\xaf\xcf\xcf\xcf\xeb\xca\xe1\x49\xac\xde\x85\xfa\x27\x40\x8f\x8f\x8f\xab\x40\x71\x75\x52\x8b\x6d\x59\x56\xc9" +
	"\x08\xd8\x6e\x3f\x42\x58\x4f\xa1\x2c\x3f\xb4\x7b\x27\x9b\x58\x6d\x35\xb1\x19\x7e\xf1\x90\x3f\x28\xf6\x62\x2a\x5d" +
	"\x21\x2e\x3a\x99\x3b\xae\xcf\x8f\x64\x50\x87\xd7\xf2\x5f\x3f\x9f\x95\x60\xc3\xa2\x60\xd2\x2f\xc0\xdc\x74\x73\xb4" +
	"\x8f\xef\x41\xf8\xdf\x4d\x0f\xcd\x1b\xb4\xf9\x8a\x96\x7f\x62\x41\xe1\x0f\xd7\xe6\x9e\xa8\xcf\x32\x9a\x78\x98\x57" +
	"\x9b\xdf\x70\x34\x27\x99\x16\xa6\x6a\x04\xd7\xc0\x35\xfe\xf2\xf7\xc3\xd3\x66\xf3\xe5\x03\xf7\x13\xff\x6c\x00\xf6" +
	"\xe1\xcc\x51\xdc\xfd\x66\x18\xe5\x6a\x18\x0e\xf7\x2f\x7d\x1a\xe1\x4f\x87\x5b\x8b\xe3\x3f\x86\x8c\x23\x10\x49\x78" +
	"\x13\x16\x0d\x34\x88\x9f\xe8\x46\x78\x80\xfa\x8d\xea\x1b\xf9\xca\xd6\xf4\x49\xbf\xa1\xf3\xa2\xbc\x7e\xc9\xc4\xd2" +
	"\xd2\x35\x63\xf2\x00\xd6\x07\x4e\x02\xb5\xe8\x43\x24\x81\xb4\x82\xb3\xd3\x5d\x16\x01\x35\x93\x54\x42\xe2\x51\x50" +
	"\xae\x41\x9e\x8b\x8e\x11\xd5\x2f\x46\xff\x9c\xb2\x6b\xb5\x2c\xca\xbc\x78\xf0\x92\xb8\x07\xa3\x6e\x0b\x68\xfe\xff" +
	"\x64\xee\x25\x8d\xba\x32\xfb\x12\x43\x35\x35\x0d\x28\xb5\x62\x5a\x6e\x53\xd3\xed\x6e\x7b\xd6\xa4\x66\x60\xae\x5f" +
	"\xab\xea\x4a\x15\x23\xa3\x02\x3c\x1f\xe6\x0b\xbb\x66\xf8\x3a\x3a\xd3\x4c\xf7\x40\xda\x4c\x5f\x46\x6b\x2d\xb4\x16" +
	"\x43\xe4\xd6\xaf\xc2\xa9\x72\xa6\x7b\x13\x8f\x12\xdb\xf7\x7e\x1d\xf4\x6b\x8e\xfd\x08\xcf\x26\x76\xf9\x7e\x0f\xdf" +
	"\x8e\xae\x85\x6e\xa6\x5b\xb3\xb2\x67\x7b\xa5\xc2\xbe\x2b\xc1\xd5\x9c\xf4\xb7\xd8\x71\x03\xb6\xae\x2b\x1b\xd5\xf9" +
	"\x7f\xff\x06\x00\x00\xff\xff\xdd\xda\x3e\x39\xee\x0c\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 3310,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1560351926, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
