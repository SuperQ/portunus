// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcd\x8e\xe3\x28\x10\xbe\xef\x53\xa0\x19\x8d\xb4\xdd\x6b\x5b\x4e" +
	"\xa2\x89\xa6\xb1\xf6\x14\x75\x5e\x62\x77\x0f\xd8\x2e\xc7\xa8\x31\x58\x80\xf3\xb3\x56\xde\x7d\x05\x98\x04\x1c\x6f" +
	"\xf7\xf4\x65\x0e\x33\x4d\xa0\xea\xab\xaa\xaf\x7e\x5c\xcf\xc9\x33\x2e\xa1\x11\x12\x92\x67\x4c\x1a\x0d\x72\x2c\xc5" +
	"\x39\x55\xf4\x5f\xca\x0f\xb8\x14\xb2\x06\x99\x96\xe2\x7c\x6d\x75\xc7\xc6\x46\x70\x6d\xde\x00\xaf\xb6\xfd\xb9\xb0" +
	"\x3f\x1b\xd2\x51\x76\xc1\x29\xe9\x7b\x06\xa9\xba\x28\x0d\x5d\x82\xdc\xdf\x74\xa0\x09\x52\x84\xab\x54\x81\xa4\x4d" +
	"\xc1\x28\x87\xb4\x05\x7a\x68\x35\x5e\x65\xdf\x2d\x28\xa2\xbc\x1f\x74\x62\x8f\xe5\xa0\xb5\xe0\x63\x88\x4b\x79\x0b" +
	"\x92\xea\x2b\x49\x08\x6e\x44\x35\xa8\x84\xe0\x56\x1c\x41\x26\x04\x93\x4a\xd3\x23\x8c\x95\x60\x42\xe2\x92\x0d\x50" +
	"\x68\x38\xeb\xb4\x86\x4a\x48\xa2\xa9\xe0\x98\x0b\x0e\xd6\x4a\x52\x8a\xfa\x32\x76\x44\x1e\x28\xc7\x79\xd1\x93\xba" +
	"\x36\x01\xe6\x57\x4e\x8e\x63\x49\xaa\xb7\x83\x14\x03\xaf\xf1\xd7\xdd\x6e\x57\x78\x40\x52\xbd\x99\x77\xf4\x3c\x4e" +
	"\x3e\xaf\xb3\xef\x12\xba\x28\x0c\x77\x65\xc5\x06\x36\x76\xe4\x9c\x9e\x68\xad\x5b\xfc\x23\xcf\xfb\x73\xe1\x0d\x22" +
	"\x32\x68\x71\xb7\x8a\x72\x0f\xa4\x74\xaa\xf4\x85\x81\xf5\xb4\xa8\xa9\xea\x19\xb9\xe0\x86\xc1\x79\x82\x44\x8c\x8e" +
	"\x47\x90\x9a\x56\x84\xa5\x84\xd1\x03\xc7\x1d\xad\x6b\x06\xf7\xf7\x4c\xf5\xa4\x02\x39\x1a\x2d\x6c\x0c\xdd\x9f\x50" +
	"\xbb\xba\x07\xed\x0e\xa9\xf4\xf4\x1b\x0f\x82\x8c\x86\x81\x18\x55\x32\x7a\x77\x28\xb7\x11\x97\x4c\x54\x6f\x13\x39" +
	"\x53\x5a\x16\x09\x7f\x88\x33\x04\xcd\xaa\x41\x4a\xe0\x3a\x22\x7d\xbf\xdf\x87\x32\x53\x62\x93\xf0\xca\xe5\x3c\xbc" +
	"\xb1\xd5\x10\xc1\xbc\xbe\xbe\xc6\xee\x5d\x3b\x42\xf9\xff\x25\x65\x25\xa1\xb3\x79\x41\x6b\x7f\x7a\xf4\xdc\x00\x64" +
	"\x27\x5a\x43\x80\xb2\x5a\x1b\x98\x6b\x56\x6a\xbe\x4c\xd1\x0d\xc5\x71\xbc\x98\xbe\xb8\x17\x8a\x53\x4b\x35\xa4\x36" +
	"\x91\x98\x8b\x93\x24\xbd\x4b\xcd\xc9\x09\x70\x21\x3b\xc2\xc2\x6c\x19\xe7\x8c\x07\xe6\x5f\xda\x4b\xda\x11\x79\x89" +
	"\xc8\xc8\xf3\xfd\x44\x86\xc5\x2e\x5c\x2f\xe3\xfc\x41\xcb\xb3\xfd\x70\xef\x28\x7f\xb8\x7e\xe4\x7d\xbb\xdd\x5f\x1b" +
	"\x21\x3b\x54\xd3\x63\x66\x0e\xa9\x14\xa7\xe4\x76\x33\x71\x64\x2e\xc7\x90\xfb\xdc\x29\x65\x52\x9c\x52\x46\x4a\x60" +
	"\x37\x36\x1d\x8d\xf7\x68\xf3\xec\x87\x89\x77\x26\x8e\x54\x4f\xb8\xb3\x07\x52\x0a\x39\x4e\xbc\xa7\x0c\x1a\x8d\xf3" +
	"\xcc\xa4\x75\xa2\x40\x42\x1d\x68\xbb\x89\x73\xf3\xcf\x5c\x1d\x09\x1b\x60\x66\x7f\xca\x76\x9e\x7f\x9b\xeb\x62\x2e" +
	"\xf4\xef\x19\x35\x13\xce\xb4\xf0\xd3\x02\xd6\x5c\x64\x7c\x68\xfe\x29\x21\xab\xfe\x8c\x94\x60\xb4\x46\x76\xf6\x4c" +
	"\x23\x57\x92\x9a\x0e\x0a\x6f\xfc\x94\x0d\x68\x98\x4d\xd1\xad\xb9\x8a\x7e\x39\x6f\xad\xa3\x81\xcb\x36\x9b\xe3\x04" +
	"\xef\x58\xf9\xfa\xf2\xf2\xb2\x2c\x3c\x95\xc4\xe2\xdb\x94\xff\x08\x68\xb3\xd9\x2c\x02\x85\xd9\x89\x35\x76\x79\x5e" +
	"\x44\x23\x60\xb7\xfb\x08\x61\x39\x84\x3c\xff\x50\xef\x9d\x68\x42\xb1\xc5\xc0\x3c\xfc\xac\x90\x3f\x48\xf6\x6c\x2a" +
	"\xdd\x21\x6e\x32\xc8\x1e\x97\xe7\x47\x34\xa8\xa7\x6a\xf9\xd5\xe5\xb3\xe0\xec\xb4\x28\x8c\xf1\x17\xc0\x37\x9d\xf7" +
	"\x76\xf3\x1e\x84\xfb\x5d\xb5\x50\xbd\x41\x9d\x2c\x48\xb9\x12\x9b\x04\xfe\xb0\x6d\xee\x88\xfa\x59\x46\x23\x0b\x7e" +
	"\xb5\xf9\x84\x21\x1f\x64\x9c\x98\xa2\x12\x5c\x03\xd7\xf8\xcb\xdf\xeb\xed\x6a\xf5\xe5\x03\xf3\x03\xff\x59\x07\x4c" +
	"\xe1\x78\x2f\x9e\x3e\xe9\x46\xbe\xe8\x86\xc5\xfd\x4b\x5f\x7a\xf8\xd3\xe2\x96\xe2\xfc\xcf\x0d\xc6\xee\x43\x8f\x4a" +
	"\xb3\xfa\x4d\x25\x90\x5a\x70\x76\x79\x42\x41\x06\xaa\x41\x2a\x21\x71\x2f\x28\xd7\x20\xaf\x59\xc3\x88\x6a\x67\x23" +
	"\xd3\xef\x1a\xb6\x44\x51\xb0\x67\x65\x6b\x77\x13\xd6\x6e\x50\xa5\x13\x9a\xfb\x3f\x9a\x17\x51\x81\x2f\xcc\x8c\x48" +
	"\x51\x0d\x55\x05\x4a\x2d\xa8\xe6\xbb\x58\x75\xb7\xdf\x5d\x35\x29\x19\x8c\xf7\x29\x5f\xdc\x5b\x9f\x91\x5e\x01\xf6" +
	"\x07\xff\x60\x3e\xcf\x6e\x6b\xb4\xaa\x48\xb7\x40\x6a\xa4\x6f\x23\xa9\x14\x5a\x8b\x2e\x30\xeb\x56\xc8\x58\x18\xe9" +
	"\x76\x0c\x5b\xd0\xf4\x8b\x5b\xa3\xdc\x7a\x60\x3e\x5e\x5e\xc5\x2c\xad\xef\xe1\x9b\x96\x9f\xc9\x22\x5d\x8f\x0b\xfb" +
	"\xa9\x13\xca\xcc\x24\x14\x5c\xf9\xa0\xbf\x85\x86\x2b\x30\x79\x5d\xd8\x44\xae\xbf\xfd\x17\x00\x00\xff\xff\x3e\x50" +
	"\x32\x9e\x26\x0c\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 3110,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1557172442, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
