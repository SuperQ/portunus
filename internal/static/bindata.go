// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcd\x6e\xdb\x38\x10\xbe\xef\x53\x08\x2d\x0a\x6c\xb3\xa2\x20\x27" +
	"\x68\xd0\x50\xd8\xbd\x18\xf1\x4b\xec\xee\x61\x24\x8e\x23\x22\x14\x29\x90\x94\x7f\x2a\xf8\xdd\x17\x14\x29\x9b\xb4" +
	"\xd5\x24\xbd\xec\xa1\x0d\x3d\x9c\xf9\x38\xf3\xcd\x8f\xe6\x2e\xbf\xa3\x35\x6e\x95\xc6\xfc\x8e\xc2\xd6\xa2\x1e\x6b" +
	"\x75\x20\x86\xff\xe0\xf2\x85\xd6\x4a\x33\xd4\xa4\x56\x87\x53\x6b\x3b\x31\x6e\x95\xb4\xee\x0e\xe9\xea\xb1\x3f\x54" +
	"\xd3\xcf\x2d\x74\x5c\x1c\x29\x81\xbe\x17\x48\xcc\xd1\x58\xec\xf2\xcc\xff\x25\x03\xcf\x33\x03\xd2\x10\x83\x9a\x6f" +
	"\x2b\xc1\x25\x92\x16\xf9\x4b\x6b\xe9\xaa\xf8\x36\x81\x66\x5c\xf6\x83\xcd\xa7\x63\x3d\x58\xab\xe4\x18\xe3\x72\xd9" +
	"\xa2\xe6\xf6\x04\x39\xd0\xad\x6a\x06\x93\x03\x6d\xd5\x0e\x75\x0e\x14\x1a\xcb\x77\x38\x36\x4a\x28\x4d\x6b\x31\x60" +
	"\x65\xf1\x60\x09\xc3\x46\x69\xb0\x5c\x49\x2a\x95\xc4\x53\xd1\xa8\xae\x03\x62\xb0\x07\x0d\x16\x19\x11\xdc\xd8\xbf" +
	"\xbc\x94\x0a\x30\x96\x34\x2d\x17\x6c\x64\xdc\xf4\x02\x8e\xde\xc8\xf9\x93\xd7\x8a\x1d\xc7\x0e\xf4\x0b\x97\xb4\xac" +
	"\x7a\x60\xcc\xb1\x52\x9e\x24\xec\xc6\x1a\x9a\xd7\x17\xad\x06\xc9\xe8\xe7\xf5\x7a\x5d\xcd\x5e\x40\xf3\xea\xee\xb3" +
	"\xbb\x31\x04\x7a\x5f\x7c\xd3\xd8\x25\xb1\x7b\xd1\xa4\x36\x88\xb1\x83\x03\xd9\x73\x66\x5b\xfa\xbd\x2c\xfb\x43\x35" +
	"\x3f\x98\xc1\x60\xd5\xe5\xd5\xac\x9c\x81\x8c\x25\xc6\x1e\x05\x4e\x9e\x56\xb3\xdb\x5b\x81\x87\x00\x99\x09\x3e\xee" +
	"\x50\x5b\xde\x80\x20\x20\xf8\x8b\xa4\x1d\x67\x4c\xe0\xe5\xbe\x30\x3d\x34\xa8\x47\x67\x45\xdd\x43\x97\xab\xac\x5d" +
	"\x5d\x82\xf6\x07\xa2\xe7\x9c\x39\x0f\xa2\x32\x88\x03\x71\xa6\x70\x66\x91\xcb\x29\xe2\x5a\xa8\xe6\x35\x90\x13\x72" +
	"\xb9\x98\xa5\x9b\x38\x63\xd0\xa2\x19\xb4\x46\x69\x13\xd2\x37\x9b\x4d\xac\x13\xaa\x21\x8f\x45\xbe\x50\x62\xc9\x54" +
	"\x42\x09\xcc\xf3\xf3\x73\xea\xde\xa9\x03\x2e\x7f\x96\x94\x95\xc6\x6e\xca\x4b\x76\x3f\x9f\x6e\x3d\x77\x00\xc5\x9e" +
	"\x33\x8c\x50\x56\xf7\x0e\xe6\x54\xd4\x56\x2e\x53\x74\x46\xf1\x1c\x2f\xa6\x2f\x6d\xa0\x6a\xdf\x72\x8b\x64\x4a\x24" +
	"\x95\x6a\xaf\xa1\xf7\xa9\xd9\x7b\x05\xa9\x74\x07\x22\xce\x96\x73\xce\x79\xe0\xfe\x91\x5e\xf3\x0e\xf4\x31\x21\xa3" +
	"\x2c\x37\x81\x8c\x09\xbb\xf2\x03\x80\x96\x37\x56\x33\xdb\x37\x72\x4f\xf9\x8d\xf8\x96\xf7\xc7\xc7\xcd\x69\xab\x74" +
	"\x97\x31\xbe\x2b\xdc\x81\x68\xb5\xcf\xcf\x92\xc0\x91\x13\x8e\x31\xf7\xa5\x37\x2a\xb4\xda\x13\x01\x35\x8a\x33\x9b" +
	"\x9e\xc6\x4b\xb4\x65\xf1\xdd\xc5\x7b\xa5\x9e\x99\x1e\xa4\x7f\x0f\xb5\x56\x7a\x0c\xbc\x13\x81\x5b\x4b\xcb\xc2\xa5" +
	"\x35\x50\xa0\x91\x45\xd6\x7e\x4c\x9d\xfd\x73\xa2\x1d\x88\x01\xaf\xde\x0f\xd9\x2e\xcb\x2f\xd7\xb6\x54\x2a\xfb\x7b" +
	"\xc1\xdd\x58\x74\x2d\xfc\x75\x01\xeb\x5a\x65\xbc\x69\xfe\x90\x90\x55\x7f\xc8\x8c\x12\x9c\x65\xd3\xec\x09\x73\x5a" +
	"\x03\xe3\x83\xa1\x0f\xf3\x68\x8e\x68\xb8\x1a\xbd\x8f\x4e\x94\xfc\xf2\xde\x4e\x8e\x46\x2e\x4f\xd9\x1c\x03\xbc\x67" +
	"\xe5\xf3\xd3\xd3\xd3\xb2\x72\x28\x89\xc5\xbb\x90\xff\x04\xe8\xe1\xe1\x61\x11\x28\xce\x4e\x6a\xb1\x2e\xcb\x2a\x19" +
	"\x01\xeb\xf5\x7b\x08\xcb\x21\x94\xe5\xbb\x76\x6f\x44\x13\xab\x2d\x06\x36\xc3\x5f\x15\xf2\x3b\xc9\xbe\x9a\x4a\x17" +
	"\x88\xb3\x4e\x36\x1d\x97\xe7\x47\x32\xa8\x43\xb5\xfc\xdf\xe5\xb3\xe0\x6c\xd8\x2e\xc6\xf4\x0b\x30\x37\xdd\xec\xed" +
	"\xc3\x5b\x10\xfe\x77\xd3\x62\xf3\x8a\x2c\x5f\xd0\xf2\x25\x16\x14\xfe\x98\xda\xdc\x13\xf5\x51\x46\x93\x17\xe6\x7d" +
	"\xe8\x17\x1e\x9a\x83\x4c\x13\x53\x35\x4a\x5a\x94\x96\x7e\xfa\xe7\xfe\x71\xb5\xfa\xf4\xce\xf3\x83\xfc\xa8\x03\xae" +
	"\x70\x66\x2f\xbe\xfe\xa2\x1b\xe5\xa2\x1b\x13\xee\xdf\xf6\xd8\xe3\x9f\x13\x6e\xad\x0e\xff\x8e\xd0\xf7\x08\x1a\x64" +
	"\x13\x16\x0d\xd2\xa9\x1f\xe4\x46\xb8\xc7\xfa\x95\xdb\x1b\xf9\xc2\xd6\xf4\xc1\x77\x43\xe7\x45\x71\xfd\x94\x89\x6b" +
	"\xcb\xa9\x19\x93\x02\x58\x1e\x38\x09\xd4\x55\x1f\x12\x8d\xc0\x94\x14\xc7\xaf\x59\x04\xd4\x0c\xda\x28\x4d\x7b\xc5" +
	"\xa5\x45\x7d\x2a\xb6\x02\x4c\x7b\x35\xfa\xe7\x90\xa7\x56\xcb\xa2\xc8\x8b\x7b\x2f\x89\x7b\x30\xea\xb6\x80\xe6\xff" +
	"\x4f\xe6\x5e\xd2\xa8\x0b\xb3\x2f\x31\x34\x43\xd3\xa0\x31\x0b\xa6\xe5\x3a\x35\x5d\x6f\xd6\x27\x0b\xb5\xc0\xf1\xf2" +
	"\xb5\xaa\x2e\x54\x09\xe8\x0d\xd2\xf9\x30\x5f\xb8\x35\xc3\xe7\x71\x32\xcd\x6c\x8b\xc0\x32\x7b\x1e\xad\xb5\xb2\x56" +
	"\x75\xd1\xb3\x7e\x15\x4e\x95\x33\xdb\x8e\xf1\x28\x71\x7d\xef\xd7\x41\xbf\xe6\xb8\x8f\xf0\x6c\xe2\x96\xef\xb7\xf0" +
	"\xdd\xe8\xba\xd2\xcd\x2c\x1b\x17\xf6\x6c\xaf\x54\xb8\xba\x52\xd2\xcc\x41\x7f\x89\x1f\x6e\xd0\xe5\x75\x61\xa3\x3a" +
	"\xfd\xf6\x5f\x00\x00\x00\xff\xff\x18\x59\x41\xf2\x23\x0d\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 3363,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1561928463, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
