// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/css/portunus.css

package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataCssPortunuscss = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcd\x8e\xe3\x36\x0c\xbe\xf7\x29\x8c\x5d\x2c\xd0\x9d\xda\x86\x33" +
	"\xc1\x06\xbb\x32\x7a\x0a\x26\x2f\xd1\xf6\x20\xdb\x74\x2c\x8c\x2c\x19\x92\x9c\x9f\x1a\x79\xf7\x42\x7f\x89\x94\x68" +
	"\x66\x76\x2f\x3d\xcc\x44\x96\xc8\x8f\xe4\x47\x91\xe2\x53\xfe\x84\x1a\xe8\xb9\x80\xfc\x09\xe1\x5e\x81\x58\x1a\x7e" +
	"\x2a\x24\xf9\x97\xb0\x3d\x6a\xb8\xe8\x40\x14\x0d\x3f\x5d\x06\x35\xd2\xa5\xe7\x4c\xe9\x33\x40\xab\xcd\x74\xaa\xcd" +
	"\x67\x8f\x47\x42\xcf\xa8\xc0\xd3\x44\xa1\x90\x67\xa9\x60\xcc\x33\xfb\x5b\xcc\x24\xcf\x24\x66\xb2\x90\x20\x48\x5f" +
	"\x53\xc2\xa0\x18\x80\xec\x07\x85\x56\xe5\x37\x03\x9a\x11\x36\xcd\x2a\x37\xcb\x66\x56\x8a\xb3\x25\xc4\x25\x6c\x00" +
	"\x41\xd4\x05\xe7\x18\xf5\xbc\x9d\x65\x8e\xd1\xc0\x0f\x20\x72\x8c\x70\xab\xc8\x01\x96\x96\x53\x2e\x50\x43\x67\xa8" +
	"\x15\x9c\x54\xd1\x41\xcb\x05\x56\x84\x33\xc4\x38\x03\x63\x25\x6f\x78\x77\x5e\x46\x2c\xf6\x84\xa1\xaa\x9e\x70\xd7" +
	"\xe9\x00\xab\x0b\xc3\x87\xa5\xc1\xed\xeb\x5e\xf0\x99\x75\xe8\xf3\x76\xbb\xad\x3d\x20\x6e\x5f\xf5\x79\xf6\xb4\x38" +
	"\x9f\x9f\xcb\x6f\x02\xc6\x28\x0c\xbb\x65\xc4\x66\xba\x8c\xf8\x54\x1c\x49\xa7\x06\xf4\xbd\xaa\xa6\x53\xed\x0d\x66" +
	"\x78\x56\xfc\x66\x35\xab\x3c\x90\x54\x85\x54\x67\x0a\xc6\xd3\xba\x23\x72\xa2\xf8\x8c\x7a\x0a\x27\x07\x99\x51\xb2" +
	"\x1c\x40\x28\xd2\x62\x5a\x60\x4a\xf6\x0c\x8d\xa4\xeb\x28\xdc\xce\x4b\x39\xe1\x16\xc4\xa2\xb5\x90\x36\x74\x3b\xca" +
	"\x86\xd5\x2d\x68\xbb\x28\x84\xa7\x5f\x7b\x10\x64\x34\x0c\x44\xab\xe2\xc5\xbb\x43\x98\x89\xb8\xa1\xbc\x7d\x75\xe4" +
	"\xb8\xb4\x24\x09\x7f\x88\x33\x04\x2d\xdb\x59\x08\x60\x2a\x22\x7d\xb7\xdb\xa5\x64\x5c\x82\xf3\xd4\x91\xbd\x03\xa9" +
	"\x13\x73\x4b\x96\xc8\xcd\xcb\x88\x09\x7b\x2b\x39\x2b\x01\xa3\xc9\x4f\xf6\xec\x57\x8f\x11\x94\x8d\x62\x69\x3e\xae" +
	"\xa2\x96\xd0\x64\xae\xe2\x8b\x5f\x1f\x07\xa2\xa0\x30\x59\x43\x8c\x1f\x05\x9e\x6c\x1e\x8e\x56\x80\x71\x31\x62\x1a" +
	"\xa6\xc6\x7b\xa0\xff\x8a\x49\x90\x11\x8b\x73\x44\x60\x55\xed\x5c\x62\x0c\x76\x6d\x0b\x17\x55\x0f\x5a\x9e\xd2\x87" +
	"\x7d\xcb\xe7\xc3\xb6\x25\x33\x34\xb5\xd9\xec\x2e\x3d\x17\x63\xd6\x91\x43\xa9\x17\x85\xe0\xc7\xfc\xba\xe3\x38\xd2" +
	"\x9b\x4b\x48\x70\x65\x95\x4a\xc1\x8f\x05\xc5\x0d\xd0\x2b\x9b\x96\xc6\x5b\xb4\x55\xf9\x5d\xc7\x7b\x27\x9e\xc9\x09" +
	"\x33\x6b\x0f\x84\xe0\x62\x71\xbc\x17\x14\x7a\x85\xaa\x52\xe7\xce\x51\x20\xa0\x0b\xb4\x6d\x7b\xb9\xfa\xa7\xb7\x0e" +
	"\x98\xce\x70\x67\xdf\x5e\x8c\x55\x55\x7d\xb9\xd7\x45\x8c\xab\xdf\x4b\xa2\xdb\x99\xae\xd7\xaf\x09\xac\x7b\x91\xe5" +
	"\xa1\xd2\x5d\x42\x56\xd3\x29\x93\x9c\x92\x2e\x33\x8d\xc6\xf5\x57\x81\x3b\x32\x4b\xb4\xf6\x2d\x35\xa0\xe1\xae\x65" +
	"\x6e\xf4\x56\xf4\x65\xbd\x35\x8e\x06\x2e\x9b\x6c\x2e\x0e\xde\xb2\xf2\xf9\xc7\x8f\x1f\x69\x61\x77\x25\x92\x67\x2e" +
	"\xff\x11\xd0\x7a\xbd\x4e\x02\x85\xd9\x89\x35\xb6\x55\x55\x47\xf5\xbe\xdd\x7e\x84\x90\x0e\xa1\xaa\x3e\xd4\x7b\x27" +
	"\x9a\x50\x2c\x19\x98\x87\xbf\xbb\xc8\x1f\x24\x3b\x8c\xec\xe5\xe5\xe5\x06\x71\x95\xc9\xcc\x32\xdd\x3f\xa2\xae\xec" +
	"\x6e\xcb\xff\x7d\x7d\x12\xce\xba\xa9\x20\xee\xa3\xde\xb1\xab\xb7\xeb\xf7\x20\xec\x77\x3b\x40\xfb\x0a\x5d\x9e\x90" +
	"\xb2\x57\xcc\x09\xfc\x61\xca\xdc\x12\xf5\xb3\x8c\x46\x16\xfc\x1c\xf3\x0b\x86\x7c\x90\x71\x62\xea\x96\x33\xa5\x5f" +
	"\x92\x4f\x7f\x3f\x6f\x56\xab\x4f\x1f\x98\x9f\xd9\xcf\x3a\xa0\x2f\x8e\xf7\xe2\xeb\x2f\xba\x51\x25\xdd\x30\xb8\x7f" +
	"\xa9\xf3\x04\x7f\x1a\xdc\x86\x9f\xfe\xb9\xc2\x98\xe1\x27\xa1\x84\x2d\xc9\xf1\x0b\xf9\xa6\x9c\x9b\xba\xde\x3e\x0f" +
	"\x0b\x2e\x29\x60\x2b\x39\x98\xd2\x1e\xdb\x49\xd9\x53\x2c\x87\xbb\x96\xec\x07\x17\x53\x02\x59\x30\xb4\x95\xcf\x76" +
	"\x27\xac\x8d\xa0\x0a\x1c\x9a\xfd\x1f\xf5\xa3\xa8\x80\x12\x3d\x29\x52\x94\x73\xdb\x82\x94\x09\xd5\x6a\x1b\xab\x6e" +
	"\x77\xdb\x8b\xc2\x0d\x85\xe5\xf6\x8a\x04\x41\x52\x3c\x49\x40\x7e\xe1\x0f\xf4\xf3\x6f\x47\x50\xa3\x9a\xa9\x01\x70" +
	"\x97\xa9\x6b\xcb\x6b\xb8\x52\x7c\x0c\xcc\xda\x79\x34\x16\xce\xd4\xb0\x84\x25\xae\xeb\xd1\xce\x64\x76\xfc\xd0\x8f" +
	"\xa3\x57\xd1\x13\xf0\x7b\xf8\xba\xa5\xdc\xc9\x66\xaa\x5b\x12\xc3\xae\x15\x2a\x75\xe2\x39\x93\x3e\xe8\x2f\xa1\xe1" +
	"\x16\x98\x02\x91\x98\x74\x2e\xbf\xfd\x17\x00\x00\xff\xff\xf2\xfb\x75\x22\x73\x0c\x00\x00")

func bindataCssPortunuscssBytes() ([]byte, error) {
	return bindataRead(
		_bindataCssPortunuscss,
		"css/portunus.css",
	)
}



func bindataCssPortunuscss() (*asset, error) {
	bytes, err := bindataCssPortunuscssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "css/portunus.css",
		size: 3187,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1557160342, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"css/portunus.css": bindataCssPortunuscss,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"css": {Func: nil, Children: map[string]*bintree{
		"portunus.css": {Func: bindataCssPortunuscss, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
