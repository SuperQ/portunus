/*******************************************************************************
*
* Copyright 2019 Stefan Majewsky <majewsky@gmx.net>
*
* This program is free software: you can redistribute it and/or modify it under
* the terms of the GNU General Public License as published by the Free Software
* Foundation, either version 3 of the License, or (at your option) any later
* version.
*
* This program is distributed in the hope that it will be useful, but WITHOUT ANY
* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
* A PARTICULAR PURPOSE. See the GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along with
* this program. If not, see <http://www.gnu.org/licenses/>.
*
*******************************************************************************/

package core

import (
	"fmt"

	goldap "gopkg.in/ldap.v3"
)

//Entity is the interface satisfied by all our model classes (at the moment,
//Group and User).
type Entity interface {
	//Render this entity into an AddRequest for LDAP. The argument is the
	//PORTUNUS_LDAP_SUFFIX.
	RenderToLDAP(suffix string) goldap.AddRequest
}

//Event describes a change to the data model.
type Event struct {
	Added []Entity
	//TODO .Modified, .Deleted
}

//User represents a single user account.
type User struct {
	LoginName  string `json:"login_name"`
	GivenName  string `json:"given_name"`
	FamilyName string `json:"family_name"`
	//PasswordHash must be in the format generated by crypt(3).
	PasswordHash string `json:"password"`
}

//RenderToLDAP implements the Entity interface.
func (u User) RenderToLDAP(suffix string) goldap.AddRequest {
	//TODO: make this a posixAccount (requires attributes uidNumber, gidNumber, homeDirectory; optional attributes loginShell, gecos, description)
	return goldap.AddRequest{
		DN: fmt.Sprintf("uid=%s,ou=users,%s", u.LoginName, suffix),
		Attributes: []goldap.Attribute{
			mkAttr("uid", u.LoginName),
			mkAttr("cn", u.GivenName+" "+u.FamilyName), //TODO: allow flipped order (family name first)
			mkAttr("sn", u.FamilyName),
			mkAttr("givenName", u.GivenName),
			mkAttr("userPassword", u.PasswordHash),
			mkAttr("objectClass", "inetOrgPerson", "organizationalPerson", "person", "top"),
		},
	}
}

//Group represents a single group of users. Membership in a group implicitly
//grants its Permissions to all users in that group.
type Group struct {
	Name             string      `json:"name"`
	Description      string      `json:"description"`
	MemberLoginNames []string    `json:"members"`
	Permissions      Permissions `json:"permissions"`
}

//RenderToLDAP implements the Entity interface.
func (g Group) RenderToLDAP(suffix string) goldap.AddRequest {
	//TODO: allow making this a posixGroup instead of a groupOfNames (requires gidNumber attribute)
	//NOTE: maybe duplicate posixGroups under a different ou so that we can have both a groupOfNames and a posixGroup for the same Group

	memberDNames := make([]string, len(g.MemberLoginNames))
	for idx, name := range g.MemberLoginNames {
		memberDNames[idx] = fmt.Sprintf("uid=%s,ou=users,%s", name, suffix)
	}

	return goldap.AddRequest{
		DN: fmt.Sprintf("cn=%s,ou=groups,%s", g.Name, suffix),
		Attributes: []goldap.Attribute{
			mkAttr("cn", g.Name),
			mkAttr("member", memberDNames...),
			mkAttr("objectClass", "groupOfNames", "top"),
		},
	}
}

//Permissions represents
type Permissions struct {
	LDAP LDAPAccessLevel `json:"ldap"`
}

//LDAPAccessLevel is an enum of permission levels for LDAP.
type LDAPAccessLevel string

const (
	//LDAPAccessNone is the access level for users that do not have access to
	//LDAP, i.e. bind requests will fail.
	LDAPAccessNone LDAPAccessLevel = ""
	//LDAPAccessFullRead allows users to read all entries in the LDAP directory.
	LDAPAccessFullRead = "full-read"
)

func mkAttr(typeName string, values ...string) goldap.Attribute {
	return goldap.Attribute{Type: typeName, Vals: values}
}
