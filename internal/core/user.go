/*******************************************************************************
*
* Copyright 2019 Stefan Majewsky <majewsky@gmx.net>
*
* This program is free software: you can redistribute it and/or modify it under
* the terms of the GNU General Public License as published by the Free Software
* Foundation, either version 3 of the License, or (at your option) any later
* version.
*
* This program is distributed in the hope that it will be useful, but WITHOUT ANY
* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
* A PARTICULAR PURPOSE. See the GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along with
* this program. If not, see <http://www.gnu.org/licenses/>.
*
*******************************************************************************/

package core

import (
	"fmt"
)

//User represents a single user account.
type User struct {
	LoginName  string `json:"login_name"`
	GivenName  string `json:"given_name"`
	FamilyName string `json:"family_name"`
	//PasswordHash must be in the format generated by crypt(3).
	PasswordHash string `json:"password"`
}

//Cloned returns a deep copy of this user.
func (u User) Cloned() User {
	return u
}

//FullName returns the user's full name.
func (u User) FullName() string {
	return u.GivenName + " " + u.FamilyName //TODO: allow flipped order (family name first)
}

//RenderToLDAP produces the LDAPObject representing this group.
func (u User) RenderToLDAP(suffix string) LDAPObject {
	//TODO: make this a posixAccount (requires attributes uidNumber, gidNumber, homeDirectory; optional attributes loginShell, gecos, description)
	return LDAPObject{
		DN: fmt.Sprintf("uid=%s,ou=users,%s", u.LoginName, suffix),
		Attributes: map[string][]string{
			"uid":          {u.LoginName},
			"cn":           {u.FullName()},
			"sn":           {u.FamilyName},
			"givenName":    {u.GivenName},
			"userPassword": {u.PasswordHash},
			"objectClass":  {"inetOrgPerson", "organizationalPerson", "person", "top"},
		},
	}
}

////////////////////////////////////////////////////////////////////////////////

//UserWithPerms is a User that carries its computed set of permissions.
type UserWithPerms struct {
	User
	Perms            Permissions
	GroupMemberships []Group
}
